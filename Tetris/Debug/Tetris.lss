
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00002130  000021c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002130  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004e1  008001b0  008001b0  00002274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031c3  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f46  00000000  00000000  0000573f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001701  00000000  00000000  00006685  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e8  00000000  00000000  00007d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf6  00000000  00000000  00008670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d45  00000000  00000000  00009366  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000c0ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
       4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      2c:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_11>
      30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      68:	14 09       	sbc	r17, r4
      6a:	2c 09       	sbc	r18, r12
      6c:	1d 09       	sbc	r17, r13
      6e:	3c 09       	sbc	r19, r12
      70:	4b 09       	sbc	r20, r11
      72:	4e 09       	sbc	r20, r14
      74:	51 09       	sbc	r21, r1

00000076 <__ctors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf ef       	ldi	r28, 0xFF	; 255
      7c:	d8 e0       	ldi	r29, 0x08	; 8
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
      82:	11 e0       	ldi	r17, 0x01	; 1
      84:	a0 e0       	ldi	r26, 0x00	; 0
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	e0 e3       	ldi	r30, 0x30	; 48
      8a:	f1 e2       	ldi	r31, 0x21	; 33
      8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
      8e:	05 90       	lpm	r0, Z+
      90:	0d 92       	st	X+, r0
      92:	a0 3b       	cpi	r26, 0xB0	; 176
      94:	b1 07       	cpc	r27, r17
      96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
      98:	26 e0       	ldi	r18, 0x06	; 6
      9a:	a0 eb       	ldi	r26, 0xB0	; 176
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	a1 39       	cpi	r26, 0x91	; 145
      a4:	b2 07       	cpc	r27, r18
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
      a8:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <main>
      ac:	0c 94 96 10 	jmp	0x212c	; 0x212c <_exit>

000000b0 <__bad_interrupt>:
      b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <button_do_nothing>:
		sei();
}

void reset_timer(unsigned char t)
{
        timer_count[t] = 0;
      b4:	08 95       	ret

000000b6 <button_repeat>:
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <button_repeat+0xa>
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <button_repeat_period>
      c8:	50 91 ca 01 	lds	r21, 0x01CA	; 0x8001ca <button_repeat_period+0x1>
      cc:	41 15       	cp	r20, r1
      ce:	51 05       	cpc	r21, r1
      d0:	01 f1       	breq	.+64     	; 0x112 <button_repeat+0x5c>
      d2:	08 2f       	mov	r16, r24
      d4:	10 e0       	ldi	r17, 0x00	; 0
      d6:	f8 01       	movw	r30, r16
      d8:	e0 54       	subi	r30, 0x40	; 64
      da:	fe 4f       	sbci	r31, 0xFE	; 254
      dc:	20 81       	ld	r18, Z
      de:	2f 5f       	subi	r18, 0xFF	; 255
      e0:	20 83       	st	Z, r18
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	42 17       	cp	r20, r18
      e6:	53 07       	cpc	r21, r19
      e8:	a1 f4       	brne	.+40     	; 0x112 <button_repeat+0x5c>
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	99 83       	std	Y+1, r25	; 0x01
      ee:	8a 83       	std	Y+2, r24	; 0x02
      f0:	ce 01       	movw	r24, r28
      f2:	01 96       	adiw	r24, 0x01	; 1
      f4:	0e 94 1e 02 	call	0x43c	; 0x43c <register_event_in_queue>
      f8:	01 97       	sbiw	r24, 0x01	; 1
      fa:	29 f4       	brne	.+10     	; 0x106 <button_repeat+0x50>
      fc:	f8 01       	movw	r30, r16
      fe:	e0 54       	subi	r30, 0x40	; 64
     100:	fe 4f       	sbci	r31, 0xFE	; 254
     102:	10 82       	st	Z, r1
     104:	06 c0       	rjmp	.+12     	; 0x112 <button_repeat+0x5c>
     106:	f8 01       	movw	r30, r16
     108:	e0 54       	subi	r30, 0x40	; 64
     10a:	fe 4f       	sbci	r31, 0xFE	; 254
     10c:	80 81       	ld	r24, Z
     10e:	81 50       	subi	r24, 0x01	; 1
     110:	80 83       	st	Z, r24
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	1f 91       	pop	r17
     11c:	0f 91       	pop	r16
     11e:	08 95       	ret

00000120 <button_release>:
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	00 d0       	rcall	.+0      	; 0x128 <button_release+0x8>
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	18 2f       	mov	r17, r24
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	89 83       	std	Y+1, r24	; 0x01
     132:	1a 83       	std	Y+2, r17	; 0x02
     134:	ce 01       	movw	r24, r28
     136:	01 96       	adiw	r24, 0x01	; 1
     138:	0e 94 1e 02 	call	0x43c	; 0x43c <register_event_in_queue>
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	69 f4       	brne	.+26     	; 0x15a <button_release+0x3a>
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 c0       	rjmp	.+4      	; 0x14a <button_release+0x2a>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	1a 95       	dec	r17
     14c:	e2 f7       	brpl	.-8      	; 0x146 <button_release+0x26>
     14e:	80 95       	com	r24
     150:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <button_state>
     154:	89 23       	and	r24, r25
     156:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <button_state>
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	1f 91       	pop	r17
     164:	08 95       	ret

00000166 <button_press>:
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	00 d0       	rcall	.+0      	; 0x16e <button_press+0x8>
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
     172:	18 2f       	mov	r17, r24
     174:	19 82       	std	Y+1, r1	; 0x01
     176:	8a 83       	std	Y+2, r24	; 0x02
     178:	e8 2f       	mov	r30, r24
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	e0 54       	subi	r30, 0x40	; 64
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	10 82       	st	Z, r1
     182:	ce 01       	movw	r24, r28
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	0e 94 1e 02 	call	0x43c	; 0x43c <register_event_in_queue>
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	61 f4       	brne	.+24     	; 0x1a6 <button_press+0x40>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <button_press+0x32>
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	1a 95       	dec	r17
     19a:	e2 f7       	brpl	.-8      	; 0x194 <button_press+0x2e>
     19c:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <button_state>
     1a0:	89 2b       	or	r24, r25
     1a2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <button_state>
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	1f 91       	pop	r17
     1b0:	08 95       	ret

000001b2 <buttons_and_timers_init>:
     1b2:	1a b8       	out	0x0a, r1	; 10
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	8b b9       	out	0x0b, r24	; 11
     1b8:	85 e3       	ldi	r24, 0x35	; 53
     1ba:	9c e0       	ldi	r25, 0x0C	; 12
     1bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     1ca:	8c e0       	ldi	r24, 0x0C	; 12
     1cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     1d0:	78 94       	sei
     1d2:	08 95       	ret

000001d4 <set_button_repeat_period_ms>:
     1d4:	f8 94       	cli
     1d6:	9c 01       	movw	r18, r24
     1d8:	36 95       	lsr	r19
     1da:	27 95       	ror	r18
     1dc:	ab e7       	ldi	r26, 0x7B	; 123
     1de:	b4 e1       	ldi	r27, 0x14	; 20
     1e0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__umulhisi3>
     1e4:	96 95       	lsr	r25
     1e6:	87 95       	ror	r24
     1e8:	99 27       	eor	r25, r25
     1ea:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <button_repeat_period+0x1>
     1ee:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <button_repeat_period>
     1f2:	e0 ec       	ldi	r30, 0xC0	; 192
     1f4:	f1 e0       	ldi	r31, 0x01	; 1
     1f6:	88 ec       	ldi	r24, 0xC8	; 200
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	11 92       	st	Z+, r1
     1fc:	e8 17       	cp	r30, r24
     1fe:	f9 07       	cpc	r31, r25
     200:	e1 f7       	brne	.-8      	; 0x1fa <set_button_repeat_period_ms+0x26>
     202:	78 94       	sei
     204:	08 95       	ret

00000206 <set_timer_period_ms>:
     206:	f8 94       	cli
     208:	48 2f       	mov	r20, r24
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	fa 01       	movw	r30, r20
     20e:	e0 55       	subi	r30, 0x50	; 80
     210:	fe 4f       	sbci	r31, 0xFE	; 254
     212:	9b 01       	movw	r18, r22
     214:	36 95       	lsr	r19
     216:	27 95       	ror	r18
     218:	ab e7       	ldi	r26, 0x7B	; 123
     21a:	b4 e1       	ldi	r27, 0x14	; 20
     21c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__umulhisi3>
     220:	96 95       	lsr	r25
     222:	87 95       	ror	r24
     224:	80 83       	st	Z, r24
     226:	fa 01       	movw	r30, r20
     228:	e8 54       	subi	r30, 0x48	; 72
     22a:	fe 4f       	sbci	r31, 0xFE	; 254
     22c:	10 82       	st	Z, r1
     22e:	78 94       	sei
     230:	08 95       	ret

00000232 <__vector_11>:
}

//void interrupt ISR_rti(void)

ISR(TIMER1_COMPA_vect)
{
     232:	1f 92       	push	r1
     234:	0f 92       	push	r0
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	0f 92       	push	r0
     23a:	11 24       	eor	r1, r1
     23c:	af 92       	push	r10
     23e:	bf 92       	push	r11
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	2f 93       	push	r18
     24e:	3f 93       	push	r19
     250:	4f 93       	push	r20
     252:	5f 93       	push	r21
     254:	6f 93       	push	r22
     256:	7f 93       	push	r23
     258:	8f 93       	push	r24
     25a:	9f 93       	push	r25
     25c:	af 93       	push	r26
     25e:	bf 93       	push	r27
     260:	ef 93       	push	r30
     262:	ff 93       	push	r31
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	00 d0       	rcall	.+0      	; 0x26a <__vector_11+0x38>
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
        unsigned char i,j;
		//Update buttons
		for(i = 0, j = 1; i < TOTAL_BUTTONS ; i++, j<<=1)
     26e:	01 e0       	ldi	r16, 0x01	; 1
     270:	10 e0       	ldi	r17, 0x00	; 0
			button_fsm[button_state & j ? 1 : 0][(~PORTD) & j ? 1 : 0](i);
     272:	ee 24       	eor	r14, r14
     274:	e3 94       	inc	r14
     276:	f1 2c       	mov	r15, r1
     278:	c1 2c       	mov	r12, r1
     27a:	d1 2c       	mov	r13, r1
     27c:	8b b1       	in	r24, 0x0b	; 11
     27e:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <button_state>
     282:	90 23       	and	r25, r16
     284:	ee 2d       	mov	r30, r14
     286:	ff 2d       	mov	r31, r15
     288:	11 f4       	brne	.+4      	; 0x28e <__vector_11+0x5c>
     28a:	ec 2d       	mov	r30, r12
     28c:	fd 2d       	mov	r31, r13
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	80 95       	com	r24
     292:	90 95       	com	r25
     294:	20 2f       	mov	r18, r16
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	28 23       	and	r18, r24
     29a:	39 23       	and	r19, r25
     29c:	8e 2d       	mov	r24, r14
     29e:	9f 2d       	mov	r25, r15
     2a0:	23 2b       	or	r18, r19
     2a2:	11 f4       	brne	.+4      	; 0x2a8 <__vector_11+0x76>
     2a4:	8c 2d       	mov	r24, r12
     2a6:	9d 2d       	mov	r25, r13
     2a8:	ee 0f       	add	r30, r30
     2aa:	ff 1f       	adc	r31, r31
     2ac:	e8 0f       	add	r30, r24
     2ae:	f9 1f       	adc	r31, r25
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	ea 5f       	subi	r30, 0xFA	; 250
     2b6:	fe 4f       	sbci	r31, 0xFE	; 254
     2b8:	01 90       	ld	r0, Z+
     2ba:	f0 81       	ld	r31, Z
     2bc:	e0 2d       	mov	r30, r0
     2be:	81 2f       	mov	r24, r17
     2c0:	09 95       	icall

ISR(TIMER1_COMPA_vect)
{
        unsigned char i,j;
		//Update buttons
		for(i = 0, j = 1; i < TOTAL_BUTTONS ; i++, j<<=1)
     2c2:	1f 5f       	subi	r17, 0xFF	; 255
     2c4:	00 0f       	add	r16, r16
     2c6:	18 30       	cpi	r17, 0x08	; 8
     2c8:	c9 f6       	brne	.-78     	; 0x27c <__vector_11+0x4a>
     2ca:	0f 2e       	mov	r0, r31
     2cc:	f0 eb       	ldi	r31, 0xB0	; 176
     2ce:	af 2e       	mov	r10, r31
     2d0:	f1 e0       	ldi	r31, 0x01	; 1
     2d2:	bf 2e       	mov	r11, r31
     2d4:	f0 2d       	mov	r31, r0
     2d6:	08 eb       	ldi	r16, 0xB8	; 184
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	f1 2c       	mov	r15, r1
static void tick_timer(unsigned char t)
{
        if(timer_compare[t] != 0 && ++timer_count[t] == timer_compare[t])
        {
             EVENT_T ev;
             ev.id = TIMER;
     2dc:	0f 2e       	mov	r0, r31
     2de:	f3 e0       	ldi	r31, 0x03	; 3
     2e0:	ef 2e       	mov	r14, r31
     2e2:	f0 2d       	mov	r31, r0

static void button_do_nothing(unsigned char b){;}

static void tick_timer(unsigned char t)
{
        if(timer_compare[t] != 0 && ++timer_count[t] == timer_compare[t])
     2e4:	f5 01       	movw	r30, r10
     2e6:	91 91       	ld	r25, Z+
     2e8:	5f 01       	movw	r10, r30
     2ea:	99 23       	and	r25, r25
     2ec:	a9 f0       	breq	.+42     	; 0x318 <__vector_11+0xe6>
     2ee:	f8 01       	movw	r30, r16
     2f0:	80 81       	ld	r24, Z
     2f2:	8f 5f       	subi	r24, 0xFF	; 255
     2f4:	80 83       	st	Z, r24
     2f6:	98 13       	cpse	r25, r24
     2f8:	0f c0       	rjmp	.+30     	; 0x318 <__vector_11+0xe6>
        {
             EVENT_T ev;
             ev.id = TIMER;
     2fa:	e9 82       	std	Y+1, r14	; 0x01
             ev.data = t;
     2fc:	fa 82       	std	Y+2, r15	; 0x02
             if(register_event_in_queue(&ev) == SUCCESS)
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	0e 94 1e 02 	call	0x43c	; 0x43c <register_event_in_queue>
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	19 f4       	brne	.+6      	; 0x310 <__vector_11+0xde>
                    timer_count[t] = 0;
     30a:	f8 01       	movw	r30, r16
     30c:	10 82       	st	Z, r1
     30e:	04 c0       	rjmp	.+8      	; 0x318 <__vector_11+0xe6>
             else
                 timer_count[t]--;  //Try not to lose event by undoing last tick!
     310:	f8 01       	movw	r30, r16
     312:	80 81       	ld	r24, Z
     314:	81 50       	subi	r24, 0x01	; 1
     316:	80 83       	st	Z, r24
		//Update buttons
		for(i = 0, j = 1; i < TOTAL_BUTTONS ; i++, j<<=1)
			button_fsm[button_state & j ? 1 : 0][(~PORTD) & j ? 1 : 0](i);

        //Update timers
		for(i = 0 ; i < TOTAL_TIMERS ; i++)
     318:	f3 94       	inc	r15
     31a:	0f 5f       	subi	r16, 0xFF	; 255
     31c:	1f 4f       	sbci	r17, 0xFF	; 255
     31e:	f8 e0       	ldi	r31, 0x08	; 8
     320:	ff 12       	cpse	r15, r31
     322:	e0 cf       	rjmp	.-64     	; 0x2e4 <__vector_11+0xb2>
			tick_timer(i);
}
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	ff 91       	pop	r31
     32e:	ef 91       	pop	r30
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	7f 91       	pop	r23
     33a:	6f 91       	pop	r22
     33c:	5f 91       	pop	r21
     33e:	4f 91       	pop	r20
     340:	3f 91       	pop	r19
     342:	2f 91       	pop	r18
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	cf 90       	pop	r12
     350:	bf 90       	pop	r11
     352:	af 90       	pop	r10
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <send_number_display>:

*	(ADDRESS << 8) | Data sets a number in xxx 7segment display
*/

void send_number_display(unsigned long int display_score)
{
     35e:	8f 92       	push	r8
     360:	9f 92       	push	r9
     362:	af 92       	push	r10
     364:	bf 92       	push	r11
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	6b 01       	movw	r12, r22
     378:	7c 01       	movw	r14, r24
     37a:	c1 14       	cp	r12, r1
     37c:	81 ee       	ldi	r24, 0xE1	; 225
     37e:	d8 06       	cpc	r13, r24
     380:	85 ef       	ldi	r24, 0xF5	; 245
     382:	e8 06       	cpc	r14, r24
     384:	85 e0       	ldi	r24, 0x05	; 5
     386:	f8 06       	cpc	r15, r24
     388:	50 f0       	brcs	.+20     	; 0x39e <send_number_display+0x40>
     38a:	0f 2e       	mov	r0, r31
     38c:	cc 24       	eor	r12, r12
     38e:	ca 94       	dec	r12
     390:	f0 ee       	ldi	r31, 0xE0	; 224
     392:	df 2e       	mov	r13, r31
     394:	f5 ef       	ldi	r31, 0xF5	; 245
     396:	ef 2e       	mov	r14, r31
     398:	f5 e0       	ldi	r31, 0x05	; 5
     39a:	ff 2e       	mov	r15, r31
     39c:	f0 2d       	mov	r31, r0
     39e:	01 e0       	ldi	r16, 0x01	; 1
     3a0:	10 e0       	ldi	r17, 0x00	; 0
	unsigned int two_bytes_send = 0x00;
	if(display_score > 99999999)
	  display_score = 99999999;
	for(current_segment = 1 ; current_segment <= MAX_DIGITS_SHOW ; current_segment++ )
	{
		two_bytes_send = display_score%10; //DATA HAS BEEN SET
     3a2:	0f 2e       	mov	r0, r31
     3a4:	fa e0       	ldi	r31, 0x0A	; 10
     3a6:	8f 2e       	mov	r8, r31
     3a8:	91 2c       	mov	r9, r1
     3aa:	a1 2c       	mov	r10, r1
     3ac:	b1 2c       	mov	r11, r1
     3ae:	f0 2d       	mov	r31, r0
		display_score /= 10;
     3b0:	c7 01       	movw	r24, r14
     3b2:	b6 01       	movw	r22, r12
     3b4:	a5 01       	movw	r20, r10
     3b6:	94 01       	movw	r18, r8
     3b8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__udivmodsi4>
     3bc:	69 01       	movw	r12, r18
     3be:	7a 01       	movw	r14, r20
		two_bytes_send |= (current_segment << 8); // Result will be (address <<8 )| Data
     3c0:	d0 2f       	mov	r29, r16
     3c2:	cc 27       	eor	r28, r28
     3c4:	c6 2b       	or	r28, r22
     3c6:	d7 2b       	or	r29, r23
		putwspi0(two_bytes_send);
     3c8:	ce 01       	movw	r24, r28
     3ca:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <putwspi0>
		putwspi0(two_bytes_send);
     3ce:	ce 01       	movw	r24, r28
     3d0:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <putwspi0>
     3d4:	0f 5f       	subi	r16, 0xFF	; 255
     3d6:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char current_segment = 0x01; //first segments
	unsigned int two_bytes_send = 0x00;
	if(display_score > 99999999)
	  display_score = 99999999;
	for(current_segment = 1 ; current_segment <= MAX_DIGITS_SHOW ; current_segment++ )
     3d8:	09 30       	cpi	r16, 0x09	; 9
     3da:	11 05       	cpc	r17, r1
     3dc:	49 f7       	brne	.-46     	; 0x3b0 <send_number_display+0x52>
		two_bytes_send |= (current_segment << 8); // Result will be (address <<8 )| Data
		putwspi0(two_bytes_send);
		putwspi0(two_bytes_send);
		//send the fucking shit
	}
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	bf 90       	pop	r11
     3f0:	af 90       	pop	r10
     3f2:	9f 90       	pop	r9
     3f4:	8f 90       	pop	r8
     3f6:	08 95       	ret

000003f8 <configure_spi_max7219_display>:
	This function configures a max7219 via spi to be used to manage an 8 digit
	7 segment display.
*/
void configure_spi_max7219_display(void)
{
	init_SPI();
     3f8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <init_SPI>

	putwspi0(INTENSITY_ADDRESS | MAX_INTENSITY); //Max intensity
     3fc:	8f e0       	ldi	r24, 0x0F	; 15
     3fe:	9a e0       	ldi	r25, 0x0A	; 10
     400:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <putwspi0>
	putwspi0(TEST_MODE_ADDRESS | NO_TEST_MODE); //TEST MODE off
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	9f e0       	ldi	r25, 0x0F	; 15
     408:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <putwspi0>
	putwspi0(0x0BFF); //Scan all
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	9b e0       	ldi	r25, 0x0B	; 11
     410:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <putwspi0>
	putwspi0(DECODE_ADDRESS | DECODE_MODE_ALL_DIGITS); //Decode
     414:	8f ef       	ldi	r24, 0xFF	; 255
     416:	99 e0       	ldi	r25, 0x09	; 9
     418:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <putwspi0>
  	putwspi0(0x0C01); //Turn on
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	9c e0       	ldi	r25, 0x0C	; 12
     420:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <putwspi0>
     424:	08 95       	ret

00000426 <get_total_events_in_queue>:
static unsigned int priority_out_offset = 0;

//How many events are there in the queue?
int get_total_events_in_queue(void)
{
        return events_in_queue + events_in_priority_queue;
     426:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <events_in_queue>
     42a:	30 91 d6 01 	lds	r19, 0x01D6	; 0x8001d6 <events_in_queue+0x1>
     42e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <events_in_priority_queue>
     432:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <events_in_priority_queue+0x1>
}
     436:	82 0f       	add	r24, r18
     438:	93 1f       	adc	r25, r19
     43a:	08 95       	ret

0000043c <register_event_in_queue>:

//Register new event
int register_event_in_queue(const EVENT_T *ev)
{
        if(events_in_queue != MAX_EVENTS)
     43c:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <events_in_queue>
     440:	30 91 d6 01 	lds	r19, 0x01D6	; 0x8001d6 <events_in_queue+0x1>
     444:	24 31       	cpi	r18, 0x14	; 20
     446:	31 05       	cpc	r19, r1
     448:	41 f1       	breq	.+80     	; 0x49a <register_event_in_queue+0x5e>
        {
                event_queue[in_offset++] = (*ev);
     44a:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <in_offset>
     44e:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <in_offset+0x1>
     452:	a9 01       	movw	r20, r18
     454:	4f 5f       	subi	r20, 0xFF	; 255
     456:	5f 4f       	sbci	r21, 0xFF	; 255
     458:	50 93 d2 01 	sts	0x01D2, r21	; 0x8001d2 <in_offset+0x1>
     45c:	40 93 d1 01 	sts	0x01D1, r20	; 0x8001d1 <in_offset>
     460:	22 0f       	add	r18, r18
     462:	33 1f       	adc	r19, r19
     464:	f9 01       	movw	r30, r18
     466:	e7 50       	subi	r30, 0x07	; 7
     468:	fa 4f       	sbci	r31, 0xFA	; 250
     46a:	dc 01       	movw	r26, r24
     46c:	8d 91       	ld	r24, X+
     46e:	9c 91       	ld	r25, X
     470:	91 83       	std	Z+1, r25	; 0x01
     472:	80 83       	st	Z, r24
                if(in_offset == MAX_EVENTS)
     474:	44 31       	cpi	r20, 0x14	; 20
     476:	51 05       	cpc	r21, r1
     478:	21 f4       	brne	.+8      	; 0x482 <register_event_in_queue+0x46>
                        in_offset = 0;
     47a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <in_offset+0x1>
     47e:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <in_offset>
                events_in_queue++;
     482:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <events_in_queue>
     486:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <events_in_queue+0x1>
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <events_in_queue+0x1>
     490:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <events_in_queue>
                return SUCCESS;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	08 95       	ret
        }
        return FULL_EVENT_QUEUE;
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
}
     49e:	08 95       	ret

000004a0 <register_event_in_priority_queue>:

//Register new priority event
int register_event_in_priority_queue(const EVENT_T *ev)
{
        if(events_in_priority_queue != MAX_PRIORITY_EVENTS)
     4a0:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <events_in_priority_queue>
     4a4:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <events_in_priority_queue+0x1>
     4a8:	24 31       	cpi	r18, 0x14	; 20
     4aa:	31 05       	cpc	r19, r1
     4ac:	41 f1       	breq	.+80     	; 0x4fe <register_event_in_priority_queue+0x5e>
        {
                priority_event_queue[priority_in_offset++] = (*ev);
     4ae:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <priority_in_offset>
     4b2:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <priority_in_offset+0x1>
     4b6:	a9 01       	movw	r20, r18
     4b8:	4f 5f       	subi	r20, 0xFF	; 255
     4ba:	5f 4f       	sbci	r21, 0xFF	; 255
     4bc:	50 93 ce 01 	sts	0x01CE, r21	; 0x8001ce <priority_in_offset+0x1>
     4c0:	40 93 cd 01 	sts	0x01CD, r20	; 0x8001cd <priority_in_offset>
     4c4:	22 0f       	add	r18, r18
     4c6:	33 1f       	adc	r19, r19
     4c8:	f9 01       	movw	r30, r18
     4ca:	ef 5d       	subi	r30, 0xDF	; 223
     4cc:	f9 4f       	sbci	r31, 0xF9	; 249
     4ce:	dc 01       	movw	r26, r24
     4d0:	8d 91       	ld	r24, X+
     4d2:	9c 91       	ld	r25, X
     4d4:	91 83       	std	Z+1, r25	; 0x01
     4d6:	80 83       	st	Z, r24
                if(priority_in_offset == MAX_PRIORITY_EVENTS)
     4d8:	44 31       	cpi	r20, 0x14	; 20
     4da:	51 05       	cpc	r21, r1
     4dc:	21 f4       	brne	.+8      	; 0x4e6 <register_event_in_priority_queue+0x46>
                       priority_in_offset = 0;
     4de:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <priority_in_offset+0x1>
     4e2:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <priority_in_offset>
                events_in_priority_queue++;
     4e6:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <events_in_priority_queue>
     4ea:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <events_in_priority_queue+0x1>
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <events_in_priority_queue+0x1>
     4f4:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <events_in_priority_queue>
                return SUCCESS;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	08 95       	ret
        }
        return FULL_EVENT_QUEUE;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
}
     502:	08 95       	ret

00000504 <wait_for_event>:

//Return next event in event queue, or wait for one if event queue is empty
void wait_for_event(EVENT_T* ev)
{
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
        while(!get_total_events_in_queue());
     50a:	0e 94 13 02 	call	0x426	; 0x426 <get_total_events_in_queue>
     50e:	89 2b       	or	r24, r25
     510:	e1 f3       	breq	.-8      	; 0x50a <wait_for_event+0x6>

        if(events_in_priority_queue)
     512:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <events_in_priority_queue>
     516:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <events_in_priority_queue+0x1>
     51a:	89 2b       	or	r24, r25
     51c:	29 f1       	breq	.+74     	; 0x568 <wait_for_event+0x64>
        {
                (*ev) = priority_event_queue[priority_out_offset++];
     51e:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <priority_out_offset>
     522:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <priority_out_offset+0x1>
     526:	9c 01       	movw	r18, r24
     528:	2f 5f       	subi	r18, 0xFF	; 255
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <priority_out_offset+0x1>
     530:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <priority_out_offset>
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	fc 01       	movw	r30, r24
     53a:	ef 5d       	subi	r30, 0xDF	; 223
     53c:	f9 4f       	sbci	r31, 0xF9	; 249
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	99 83       	std	Y+1, r25	; 0x01
     544:	88 83       	st	Y, r24
                if(priority_out_offset == MAX_PRIORITY_EVENTS)
     546:	24 31       	cpi	r18, 0x14	; 20
     548:	31 05       	cpc	r19, r1
     54a:	21 f4       	brne	.+8      	; 0x554 <wait_for_event+0x50>
                             priority_out_offset = 0;
     54c:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <priority_out_offset+0x1>
     550:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <priority_out_offset>
                events_in_priority_queue--;
     554:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <events_in_priority_queue>
     558:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <events_in_priority_queue+0x1>
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <events_in_priority_queue+0x1>
     562:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <events_in_priority_queue>
     566:	24 c0       	rjmp	.+72     	; 0x5b0 <wait_for_event+0xac>
        }
        else  //We know there are events here since we exited while
        {
                (*ev) = event_queue[out_offset++];
     568:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <out_offset>
     56c:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <out_offset+0x1>
     570:	9c 01       	movw	r18, r24
     572:	2f 5f       	subi	r18, 0xFF	; 255
     574:	3f 4f       	sbci	r19, 0xFF	; 255
     576:	30 93 d0 01 	sts	0x01D0, r19	; 0x8001d0 <out_offset+0x1>
     57a:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <out_offset>
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	fc 01       	movw	r30, r24
     584:	e7 50       	subi	r30, 0x07	; 7
     586:	fa 4f       	sbci	r31, 0xFA	; 250
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	99 83       	std	Y+1, r25	; 0x01
     58e:	88 83       	st	Y, r24
                if(out_offset == MAX_EVENTS)
     590:	24 31       	cpi	r18, 0x14	; 20
     592:	31 05       	cpc	r19, r1
     594:	21 f4       	brne	.+8      	; 0x59e <wait_for_event+0x9a>
                             out_offset = 0;
     596:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <out_offset+0x1>
     59a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <out_offset>
                events_in_queue--;
     59e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <events_in_queue>
     5a2:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <events_in_queue+0x1>
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <events_in_queue+0x1>
     5ac:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <events_in_queue>
        }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <flush_event_queue>:

//Remove all events from event queue
void flush_event_queue(void)
{
            //_asm sei;     //No events while cleaning...
           events_in_priority_queue = events_in_queue = 0;
     5b6:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <events_in_queue+0x1>
     5ba:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <events_in_queue>
     5be:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <events_in_priority_queue+0x1>
     5c2:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <events_in_priority_queue>
           in_offset = out_offset = 0;
     5c6:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <out_offset+0x1>
     5ca:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <out_offset>
     5ce:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <in_offset+0x1>
     5d2:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <in_offset>
           priority_in_offset = priority_out_offset = 0;
     5d6:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <priority_out_offset+0x1>
     5da:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <priority_out_offset>
     5de:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <priority_in_offset+0x1>
     5e2:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <priority_in_offset>
     5e6:	08 95       	ret

000005e8 <LEDdisplay_init>:
      return LEDdisplay_map_rgb(0,0,0);
}

//Clear display to color
void LEDdisplay_clear_to_color(color c)
{
     5e8:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <WS2812B_Init>
     5ec:	08 95       	ret

000005ee <LEDdisplay_map_rgb>:
     5ee:	78 2f       	mov	r23, r24
     5f0:	84 2f       	mov	r24, r20
     5f2:	08 95       	ret

000005f4 <LEDdisplay_set_pixel>:
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	69 01       	movw	r12, r18
     5fc:	e4 2e       	mov	r14, r20
     5fe:	88 30       	cpi	r24, 0x08	; 8
     600:	08 f0       	brcs	.+2      	; 0x604 <LEDdisplay_set_pixel+0x10>
     602:	3f c0       	rjmp	.+126    	; 0x682 <LEDdisplay_set_pixel+0x8e>
     604:	60 32       	cpi	r22, 0x20	; 32
     606:	e8 f5       	brcc	.+122    	; 0x682 <LEDdisplay_set_pixel+0x8e>
     608:	60 ff       	sbrs	r22, 0
     60a:	1a c0       	rjmp	.+52     	; 0x640 <LEDdisplay_set_pixel+0x4c>
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	fc 01       	movw	r30, r24
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	e8 0f       	add	r30, r24
     616:	f9 1f       	adc	r31, r25
     618:	4f e1       	ldi	r20, 0x1F	; 31
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	46 1b       	sub	r20, r22
     61e:	51 09       	sbc	r21, r1
     620:	ca 01       	movw	r24, r20
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	48 0f       	add	r20, r24
     628:	59 1f       	adc	r21, r25
     62a:	44 0f       	add	r20, r20
     62c:	55 1f       	adc	r21, r21
     62e:	44 0f       	add	r20, r20
     630:	55 1f       	adc	r21, r21
     632:	44 0f       	add	r20, r20
     634:	55 1f       	adc	r21, r21
     636:	e4 0f       	add	r30, r20
     638:	f5 1f       	adc	r31, r21
     63a:	e9 52       	subi	r30, 0x29	; 41
     63c:	fe 4f       	sbci	r31, 0xFE	; 254
     63e:	1c c0       	rjmp	.+56     	; 0x678 <LEDdisplay_set_pixel+0x84>
     640:	e7 e0       	ldi	r30, 0x07	; 7
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	e8 1b       	sub	r30, r24
     646:	f1 09       	sbc	r31, r1
     648:	cf 01       	movw	r24, r30
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	e8 0f       	add	r30, r24
     650:	f9 1f       	adc	r31, r25
     652:	8f e1       	ldi	r24, 0x1F	; 31
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	86 1b       	sub	r24, r22
     658:	91 09       	sbc	r25, r1
     65a:	9c 01       	movw	r18, r24
     65c:	22 0f       	add	r18, r18
     65e:	33 1f       	adc	r19, r19
     660:	82 0f       	add	r24, r18
     662:	93 1f       	adc	r25, r19
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	e8 0f       	add	r30, r24
     672:	f9 1f       	adc	r31, r25
     674:	e9 52       	subi	r30, 0x29	; 41
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	30 97       	sbiw	r30, 0x00	; 0
     67a:	19 f0       	breq	.+6      	; 0x682 <LEDdisplay_set_pixel+0x8e>
     67c:	c0 82       	st	Z, r12
     67e:	d1 82       	std	Z+1, r13	; 0x01
     680:	e2 82       	std	Z+2, r14	; 0x02
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	08 95       	ret

0000068a <LEDdisplay_update>:
}

void LEDdisplay_update(void)
{
     //IMPORTANT!!!! Always set display pointer and display length!!
     WS2812B_Set_Data_pointer((unsigned char*)display_raw_data);
     68a:	87 ed       	ldi	r24, 0xD7	; 215
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <WS2812B_Set_Data_pointer>
     WS2812B_Set_Data_Length(DISPLAY_WIDTH*DISPLAY_HEIGHT*sizeof(color));
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <WS2812B_Set_Data_Length>
     WS2812B_Send_data(); 
     69a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <WS2812B_Send_data>
     69e:	08 95       	ret

000006a0 <init_row_pointers>:
		return 1;
	}
	else
		return 0;

}
     6a0:	89 ed       	ldi	r24, 0xD9	; 217
     6a2:	94 e0       	ldi	r25, 0x04	; 4
     6a4:	e9 e4       	ldi	r30, 0x49	; 73
     6a6:	f6 e0       	ldi	r31, 0x06	; 6
     6a8:	21 e9       	ldi	r18, 0x91	; 145
     6aa:	36 e0       	ldi	r19, 0x06	; 6
     6ac:	81 93       	st	Z+, r24
     6ae:	91 93       	st	Z+, r25
     6b0:	08 96       	adiw	r24, 0x08	; 8
     6b2:	e2 17       	cp	r30, r18
     6b4:	f3 07       	cpc	r31, r19
     6b6:	d1 f7       	brne	.-12     	; 0x6ac <init_row_pointers+0xc>
     6b8:	08 95       	ret

000006ba <seed_rand>:
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <seed_rand+0xa>
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	0f 5f       	subi	r16, 0xFF	; 255
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	0e 94 13 02 	call	0x426	; 0x426 <get_total_events_in_queue>
     6d4:	89 2b       	or	r24, r25
     6d6:	d1 f3       	breq	.-12     	; 0x6cc <seed_rand+0x12>
     6d8:	ce 01       	movw	r24, r28
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	0e 94 82 02 	call	0x504	; 0x504 <wait_for_event>
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	81 11       	cpse	r24, r1
     6e4:	f3 cf       	rjmp	.-26     	; 0x6cc <seed_rand+0x12>
     6e6:	c8 01       	movw	r24, r16
     6e8:	0e 94 59 10 	call	0x20b2	; 0x20b2 <srand>
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	08 95       	ret

000006fa <clear_board_to_block>:
     6fa:	a9 e4       	ldi	r26, 0x49	; 73
     6fc:	b6 e0       	ldi	r27, 0x06	; 6
     6fe:	41 e9       	ldi	r20, 0x91	; 145
     700:	56 e0       	ldi	r21, 0x06	; 6
     702:	10 c0       	rjmp	.+32     	; 0x724 <clear_board_to_block+0x2a>
     704:	ed 91       	ld	r30, X+
     706:	fc 91       	ld	r31, X
     708:	11 97       	sbiw	r26, 0x01	; 1
     70a:	82 60       	ori	r24, 0x02	; 2
     70c:	e2 0f       	add	r30, r18
     70e:	f3 1f       	adc	r31, r19
     710:	80 83       	st	Z, r24
     712:	2f 5f       	subi	r18, 0xFF	; 255
     714:	3f 4f       	sbci	r19, 0xFF	; 255
     716:	2c 30       	cpi	r18, 0x0C	; 12
     718:	31 05       	cpc	r19, r1
     71a:	a1 f7       	brne	.-24     	; 0x704 <clear_board_to_block+0xa>
     71c:	12 96       	adiw	r26, 0x02	; 2
     71e:	a4 17       	cp	r26, r20
     720:	b5 07       	cpc	r27, r21
     722:	19 f0       	breq	.+6      	; 0x72a <clear_board_to_block+0x30>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	ed cf       	rjmp	.-38     	; 0x704 <clear_board_to_block+0xa>
     72a:	08 95       	ret

0000072c <update_display_data>:
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	01 e5       	ldi	r16, 0x51	; 81
     73c:	16 e0       	ldi	r17, 0x06	; 6
     73e:	d1 2c       	mov	r13, r1
     740:	2f c0       	rjmp	.+94     	; 0x7a0 <update_display_data+0x74>
     742:	d8 01       	movw	r26, r16
     744:	8d 91       	ld	r24, X+
     746:	9c 91       	ld	r25, X
     748:	fc 01       	movw	r30, r24
     74a:	ec 0f       	add	r30, r28
     74c:	fd 1f       	adc	r31, r29
     74e:	20 81       	ld	r18, Z
     750:	21 ff       	sbrs	r18, 1
     752:	1c c0       	rjmp	.+56     	; 0x78c <update_display_data+0x60>
     754:	82 2f       	mov	r24, r18
     756:	82 95       	swap	r24
     758:	86 95       	lsr	r24
     75a:	87 70       	andi	r24, 0x07	; 7
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	fc 01       	movw	r30, r24
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	8e 0f       	add	r24, r30
     766:	9f 1f       	adc	r25, r31
     768:	fc 01       	movw	r30, r24
     76a:	e8 5a       	subi	r30, 0xA8	; 168
     76c:	fe 4f       	sbci	r31, 0xFE	; 254
     76e:	20 81       	ld	r18, Z
     770:	31 81       	ldd	r19, Z+1	; 0x01
     772:	42 81       	ldd	r20, Z+2	; 0x02
     774:	6d 2d       	mov	r22, r13
     776:	8c 2f       	mov	r24, r28
     778:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LEDdisplay_set_pixel>
     77c:	d7 01       	movw	r26, r14
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	ec 0f       	add	r30, r28
     784:	fd 1f       	adc	r31, r29
     786:	80 81       	ld	r24, Z
     788:	8d 7f       	andi	r24, 0xFD	; 253
     78a:	80 83       	st	Z, r24
     78c:	21 96       	adiw	r28, 0x01	; 1
     78e:	c8 30       	cpi	r28, 0x08	; 8
     790:	d1 05       	cpc	r29, r1
     792:	b9 f6       	brne	.-82     	; 0x742 <update_display_data+0x16>
     794:	d3 94       	inc	r13
     796:	0e 5f       	subi	r16, 0xFE	; 254
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	b0 e2       	ldi	r27, 0x20	; 32
     79c:	db 16       	cp	r13, r27
     79e:	21 f0       	breq	.+8      	; 0x7a8 <update_display_data+0x7c>
     7a0:	c0 e0       	ldi	r28, 0x00	; 0
     7a2:	d0 e0       	ldi	r29, 0x00	; 0
     7a4:	78 01       	movw	r14, r16
     7a6:	cd cf       	rjmp	.-102    	; 0x742 <update_display_data+0x16>
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	08 95       	ret

000007b8 <update_all_display_data>:
     7b8:	a1 e5       	ldi	r26, 0x51	; 81
     7ba:	b6 e0       	ldi	r27, 0x06	; 6
     7bc:	41 e9       	ldi	r20, 0x91	; 145
     7be:	56 e0       	ldi	r21, 0x06	; 6
     7c0:	10 c0       	rjmp	.+32     	; 0x7e2 <update_all_display_data+0x2a>
     7c2:	ed 91       	ld	r30, X+
     7c4:	fc 91       	ld	r31, X
     7c6:	11 97       	sbiw	r26, 0x01	; 1
     7c8:	e8 0f       	add	r30, r24
     7ca:	f9 1f       	adc	r31, r25
     7cc:	20 81       	ld	r18, Z
     7ce:	22 60       	ori	r18, 0x02	; 2
     7d0:	20 83       	st	Z, r18
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	88 30       	cpi	r24, 0x08	; 8
     7d6:	91 05       	cpc	r25, r1
     7d8:	a1 f7       	brne	.-24     	; 0x7c2 <update_all_display_data+0xa>
     7da:	12 96       	adiw	r26, 0x02	; 2
     7dc:	4a 17       	cp	r20, r26
     7de:	5b 07       	cpc	r21, r27
     7e0:	19 f0       	breq	.+6      	; 0x7e8 <update_all_display_data+0x30>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	ed cf       	rjmp	.-38     	; 0x7c2 <update_all_display_data+0xa>
     7e8:	0e 94 96 03 	call	0x72c	; 0x72c <update_display_data>
     7ec:	08 95       	ret

000007ee <get_piece_data>:
     7ee:	84 30       	cpi	r24, 0x04	; 4
     7f0:	91 05       	cpc	r25, r1
     7f2:	44 f5       	brge	.+80     	; 0x844 <get_piece_data+0x56>
     7f4:	64 30       	cpi	r22, 0x04	; 4
     7f6:	71 05       	cpc	r23, r1
     7f8:	38 f5       	brcc	.+78     	; 0x848 <get_piece_data+0x5a>
     7fa:	48 30       	cpi	r20, 0x08	; 8
     7fc:	38 f5       	brcc	.+78     	; 0x84c <get_piece_data+0x5e>
     7fe:	24 30       	cpi	r18, 0x04	; 4
     800:	38 f5       	brcc	.+78     	; 0x850 <get_piece_data+0x62>
     802:	fb 01       	movw	r30, r22
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	e8 0f       	add	r30, r24
     80e:	f9 1f       	adc	r31, r25
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	e2 5f       	subi	r30, 0xF2	; 242
     816:	fe 4f       	sbci	r31, 0xFE	; 254
     818:	a2 2f       	mov	r26, r18
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	48 9f       	mul	r20, r24
     820:	a0 0d       	add	r26, r0
     822:	b1 1d       	adc	r27, r1
     824:	11 24       	eor	r1, r1
     826:	aa 0f       	add	r26, r26
     828:	bb 1f       	adc	r27, r27
     82a:	a0 59       	subi	r26, 0x90	; 144
     82c:	be 4f       	sbci	r27, 0xFE	; 254
     82e:	20 81       	ld	r18, Z
     830:	31 81       	ldd	r19, Z+1	; 0x01
     832:	8d 91       	ld	r24, X+
     834:	9c 91       	ld	r25, X
     836:	28 23       	and	r18, r24
     838:	39 23       	and	r19, r25
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	23 2b       	or	r18, r19
     83e:	49 f4       	brne	.+18     	; 0x852 <get_piece_data+0x64>
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	08 95       	ret
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	08 95       	ret
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	08 95       	ret
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	08 95       	ret
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	08 95       	ret

00000854 <can_place_piece>:
     854:	2f 92       	push	r2
     856:	3f 92       	push	r3
     858:	4f 92       	push	r4
     85a:	5f 92       	push	r5
     85c:	6f 92       	push	r6
     85e:	7f 92       	push	r7
     860:	8f 92       	push	r8
     862:	9f 92       	push	r9
     864:	af 92       	push	r10
     866:	bf 92       	push	r11
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	28 2e       	mov	r2, r24
     87a:	39 2e       	mov	r3, r25
     87c:	4b 01       	movw	r8, r22
     87e:	44 2e       	mov	r4, r20
     880:	52 2e       	mov	r5, r18
     882:	cb 01       	movw	r24, r22
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	9c 01       	movw	r18, r24
     88a:	27 5b       	subi	r18, 0xB7	; 183
     88c:	39 4f       	sbci	r19, 0xF9	; 249
     88e:	69 01       	movw	r12, r18
     890:	a1 2c       	mov	r10, r1
     892:	b1 2c       	mov	r11, r1
     894:	30 c0       	rjmp	.+96     	; 0x8f6 <can_place_piece+0xa2>
     896:	25 2d       	mov	r18, r5
     898:	44 2d       	mov	r20, r4
     89a:	b7 01       	movw	r22, r14
     89c:	ce 01       	movw	r24, r28
     89e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <get_piece_data>
     8a2:	88 23       	and	r24, r24
     8a4:	c1 f0       	breq	.+48     	; 0x8d6 <can_place_piece+0x82>
     8a6:	08 30       	cpi	r16, 0x08	; 8
     8a8:	11 05       	cpc	r17, r1
     8aa:	70 f5       	brcc	.+92     	; 0x908 <__stack+0x9>
     8ac:	84 e2       	ldi	r24, 0x24	; 36
     8ae:	68 16       	cp	r6, r24
     8b0:	71 04       	cpc	r7, r1
     8b2:	60 f5       	brcc	.+88     	; 0x90c <__stack+0xd>
     8b4:	f6 01       	movw	r30, r12
     8b6:	40 81       	ld	r20, Z
     8b8:	51 81       	ldd	r21, Z+1	; 0x01
     8ba:	fa 01       	movw	r30, r20
     8bc:	e0 0f       	add	r30, r16
     8be:	f1 1f       	adc	r31, r17
     8c0:	80 81       	ld	r24, Z
     8c2:	82 95       	swap	r24
     8c4:	86 95       	lsr	r24
     8c6:	87 70       	andi	r24, 0x07	; 7
     8c8:	31 f0       	breq	.+12     	; 0x8d6 <can_place_piece+0x82>
     8ca:	fa 01       	movw	r30, r20
     8cc:	e0 0f       	add	r30, r16
     8ce:	f1 1f       	adc	r31, r17
     8d0:	80 81       	ld	r24, Z
     8d2:	80 ff       	sbrs	r24, 0
     8d4:	1d c0       	rjmp	.+58     	; 0x910 <__stack+0x11>
     8d6:	21 96       	adiw	r28, 0x01	; 1
     8d8:	0f 5f       	subi	r16, 0xFF	; 255
     8da:	1f 4f       	sbci	r17, 0xFF	; 255
     8dc:	c4 30       	cpi	r28, 0x04	; 4
     8de:	d1 05       	cpc	r29, r1
     8e0:	d1 f6       	brne	.-76     	; 0x896 <can_place_piece+0x42>
     8e2:	ff ef       	ldi	r31, 0xFF	; 255
     8e4:	af 1a       	sub	r10, r31
     8e6:	bf 0a       	sbc	r11, r31
     8e8:	22 e0       	ldi	r18, 0x02	; 2
     8ea:	c2 0e       	add	r12, r18
     8ec:	d1 1c       	adc	r13, r1
     8ee:	34 e0       	ldi	r19, 0x04	; 4
     8f0:	a3 16       	cp	r10, r19
     8f2:	b1 04       	cpc	r11, r1
     8f4:	79 f0       	breq	.+30     	; 0x914 <__stack+0x15>
     8f6:	02 2d       	mov	r16, r2
     8f8:	13 2d       	mov	r17, r3
     8fa:	c0 e0       	ldi	r28, 0x00	; 0
     8fc:	d0 e0       	ldi	r29, 0x00	; 0
     8fe:	75 01       	movw	r14, r10
     900:	35 01       	movw	r6, r10
     902:	68 0c       	add	r6, r8
     904:	79 1c       	adc	r7, r9
     906:	c7 cf       	rjmp	.-114    	; 0x896 <can_place_piece+0x42>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	05 c0       	rjmp	.+10     	; 0x916 <__stack+0x17>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	03 c0       	rjmp	.+6      	; 0x916 <__stack+0x17>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	01 c0       	rjmp	.+2      	; 0x916 <__stack+0x17>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	9f 90       	pop	r9
     92c:	8f 90       	pop	r8
     92e:	7f 90       	pop	r7
     930:	6f 90       	pop	r6
     932:	5f 90       	pop	r5
     934:	4f 90       	pop	r4
     936:	3f 90       	pop	r3
     938:	2f 90       	pop	r2
     93a:	08 95       	ret

0000093c <remove_piece>:
     93c:	af 92       	push	r10
     93e:	bf 92       	push	r11
     940:	cf 92       	push	r12
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	6c 01       	movw	r12, r24
     952:	a4 2e       	mov	r10, r20
     954:	b2 2e       	mov	r11, r18
     956:	66 0f       	add	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	cb 01       	movw	r24, r22
     95c:	87 5b       	subi	r24, 0xB7	; 183
     95e:	99 4f       	sbci	r25, 0xF9	; 249
     960:	7c 01       	movw	r14, r24
     962:	00 e0       	ldi	r16, 0x00	; 0
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	20 c0       	rjmp	.+64     	; 0x9a8 <remove_piece+0x6c>
     968:	2b 2d       	mov	r18, r11
     96a:	4a 2d       	mov	r20, r10
     96c:	b8 01       	movw	r22, r16
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 f7 03 	call	0x7ee	; 0x7ee <get_piece_data>
     974:	88 23       	and	r24, r24
     976:	61 f0       	breq	.+24     	; 0x990 <remove_piece+0x54>
     978:	d7 01       	movw	r26, r14
     97a:	ed 91       	ld	r30, X+
     97c:	fc 91       	ld	r31, X
     97e:	c6 01       	movw	r24, r12
     980:	8c 0f       	add	r24, r28
     982:	9d 1f       	adc	r25, r29
     984:	e8 0f       	add	r30, r24
     986:	f9 1f       	adc	r31, r25
     988:	80 81       	ld	r24, Z
     98a:	8c 71       	andi	r24, 0x1C	; 28
     98c:	82 60       	ori	r24, 0x02	; 2
     98e:	80 83       	st	Z, r24
     990:	21 96       	adiw	r28, 0x01	; 1
     992:	c4 30       	cpi	r28, 0x04	; 4
     994:	d1 05       	cpc	r29, r1
     996:	41 f7       	brne	.-48     	; 0x968 <remove_piece+0x2c>
     998:	0f 5f       	subi	r16, 0xFF	; 255
     99a:	1f 4f       	sbci	r17, 0xFF	; 255
     99c:	b2 e0       	ldi	r27, 0x02	; 2
     99e:	eb 0e       	add	r14, r27
     9a0:	f1 1c       	adc	r15, r1
     9a2:	04 30       	cpi	r16, 0x04	; 4
     9a4:	11 05       	cpc	r17, r1
     9a6:	19 f0       	breq	.+6      	; 0x9ae <remove_piece+0x72>
     9a8:	c0 e0       	ldi	r28, 0x00	; 0
     9aa:	d0 e0       	ldi	r29, 0x00	; 0
     9ac:	dd cf       	rjmp	.-70     	; 0x968 <remove_piece+0x2c>
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	08 95       	ret

000009c4 <place_falling_piece>:
     9c4:	9f 92       	push	r9
     9c6:	af 92       	push	r10
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	6c 01       	movw	r12, r24
     9dc:	b4 2e       	mov	r11, r20
     9de:	a2 2e       	mov	r10, r18
     9e0:	66 0f       	add	r22, r22
     9e2:	77 1f       	adc	r23, r23
     9e4:	cb 01       	movw	r24, r22
     9e6:	87 5b       	subi	r24, 0xB7	; 183
     9e8:	99 4f       	sbci	r25, 0xF9	; 249
     9ea:	7c 01       	movw	r14, r24
     9ec:	00 e0       	ldi	r16, 0x00	; 0
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	94 2e       	mov	r9, r20
     9f2:	99 0c       	add	r9, r9
     9f4:	99 0c       	add	r9, r9
     9f6:	99 0c       	add	r9, r9
     9f8:	99 0c       	add	r9, r9
     9fa:	99 0c       	add	r9, r9
     9fc:	21 c0       	rjmp	.+66     	; 0xa40 <place_falling_piece+0x7c>
     9fe:	2a 2d       	mov	r18, r10
     a00:	4b 2d       	mov	r20, r11
     a02:	b8 01       	movw	r22, r16
     a04:	ce 01       	movw	r24, r28
     a06:	0e 94 f7 03 	call	0x7ee	; 0x7ee <get_piece_data>
     a0a:	88 23       	and	r24, r24
     a0c:	69 f0       	breq	.+26     	; 0xa28 <place_falling_piece+0x64>
     a0e:	d7 01       	movw	r26, r14
     a10:	ed 91       	ld	r30, X+
     a12:	fc 91       	ld	r31, X
     a14:	c6 01       	movw	r24, r12
     a16:	8c 0f       	add	r24, r28
     a18:	9d 1f       	adc	r25, r29
     a1a:	e8 0f       	add	r30, r24
     a1c:	f9 1f       	adc	r31, r25
     a1e:	80 81       	ld	r24, Z
     a20:	8c 71       	andi	r24, 0x1C	; 28
     a22:	83 60       	ori	r24, 0x03	; 3
     a24:	89 29       	or	r24, r9
     a26:	80 83       	st	Z, r24
     a28:	21 96       	adiw	r28, 0x01	; 1
     a2a:	c4 30       	cpi	r28, 0x04	; 4
     a2c:	d1 05       	cpc	r29, r1
     a2e:	39 f7       	brne	.-50     	; 0x9fe <place_falling_piece+0x3a>
     a30:	0f 5f       	subi	r16, 0xFF	; 255
     a32:	1f 4f       	sbci	r17, 0xFF	; 255
     a34:	b2 e0       	ldi	r27, 0x02	; 2
     a36:	eb 0e       	add	r14, r27
     a38:	f1 1c       	adc	r15, r1
     a3a:	04 30       	cpi	r16, 0x04	; 4
     a3c:	11 05       	cpc	r17, r1
     a3e:	19 f0       	breq	.+6      	; 0xa46 <place_falling_piece+0x82>
     a40:	c0 e0       	ldi	r28, 0x00	; 0
     a42:	d0 e0       	ldi	r29, 0x00	; 0
     a44:	dc cf       	rjmp	.-72     	; 0x9fe <place_falling_piece+0x3a>
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	08 95       	ret

00000a5e <game_pause_animation>:
     a5e:	cf 93       	push	r28
     a60:	c0 91 d8 04 	lds	r28, 0x04D8	; 0x8004d8 <count.2242>
     a64:	c0 ff       	sbrs	r28, 0
     a66:	07 c0       	rjmp	.+14     	; 0xa76 <game_pause_animation+0x18>
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	08 2e       	mov	r0, r24
     a6c:	00 0c       	add	r0, r0
     a6e:	99 0b       	sbc	r25, r25
     a70:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
     a74:	06 c0       	rjmp	.+12     	; 0xa82 <game_pause_animation+0x24>
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	08 2e       	mov	r0, r24
     a7a:	00 0c       	add	r0, r0
     a7c:	99 0b       	sbc	r25, r25
     a7e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
     a82:	cf 5f       	subi	r28, 0xFF	; 255
     a84:	c0 93 d8 04 	sts	0x04D8, r28	; 0x8004d8 <count.2242>
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <place_static_piece>:
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	6c 01       	movw	r12, r24
     aa4:	b4 2e       	mov	r11, r20
     aa6:	a2 2e       	mov	r10, r18
     aa8:	66 0f       	add	r22, r22
     aaa:	77 1f       	adc	r23, r23
     aac:	cb 01       	movw	r24, r22
     aae:	87 5b       	subi	r24, 0xB7	; 183
     ab0:	99 4f       	sbci	r25, 0xF9	; 249
     ab2:	7c 01       	movw	r14, r24
     ab4:	00 e0       	ldi	r16, 0x00	; 0
     ab6:	10 e0       	ldi	r17, 0x00	; 0
     ab8:	94 2e       	mov	r9, r20
     aba:	99 0c       	add	r9, r9
     abc:	99 0c       	add	r9, r9
     abe:	99 0c       	add	r9, r9
     ac0:	99 0c       	add	r9, r9
     ac2:	99 0c       	add	r9, r9
     ac4:	21 c0       	rjmp	.+66     	; 0xb08 <place_static_piece+0x7c>
     ac6:	2a 2d       	mov	r18, r10
     ac8:	4b 2d       	mov	r20, r11
     aca:	b8 01       	movw	r22, r16
     acc:	ce 01       	movw	r24, r28
     ace:	0e 94 f7 03 	call	0x7ee	; 0x7ee <get_piece_data>
     ad2:	88 23       	and	r24, r24
     ad4:	69 f0       	breq	.+26     	; 0xaf0 <place_static_piece+0x64>
     ad6:	d7 01       	movw	r26, r14
     ad8:	ed 91       	ld	r30, X+
     ada:	fc 91       	ld	r31, X
     adc:	c6 01       	movw	r24, r12
     ade:	8c 0f       	add	r24, r28
     ae0:	9d 1f       	adc	r25, r29
     ae2:	e8 0f       	add	r30, r24
     ae4:	f9 1f       	adc	r31, r25
     ae6:	80 81       	ld	r24, Z
     ae8:	8c 71       	andi	r24, 0x1C	; 28
     aea:	82 60       	ori	r24, 0x02	; 2
     aec:	89 29       	or	r24, r9
     aee:	80 83       	st	Z, r24
     af0:	21 96       	adiw	r28, 0x01	; 1
     af2:	c4 30       	cpi	r28, 0x04	; 4
     af4:	d1 05       	cpc	r29, r1
     af6:	39 f7       	brne	.-50     	; 0xac6 <place_static_piece+0x3a>
     af8:	0f 5f       	subi	r16, 0xFF	; 255
     afa:	1f 4f       	sbci	r17, 0xFF	; 255
     afc:	b2 e0       	ldi	r27, 0x02	; 2
     afe:	eb 0e       	add	r14, r27
     b00:	f1 1c       	adc	r15, r1
     b02:	04 30       	cpi	r16, 0x04	; 4
     b04:	11 05       	cpc	r17, r1
     b06:	19 f0       	breq	.+6      	; 0xb0e <place_static_piece+0x82>
     b08:	c0 e0       	ldi	r28, 0x00	; 0
     b0a:	d0 e0       	ldi	r29, 0x00	; 0
     b0c:	dc cf       	rjmp	.-72     	; 0xac6 <place_static_piece+0x3a>
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
     b1e:	bf 90       	pop	r11
     b20:	af 90       	pop	r10
     b22:	9f 90       	pop	r9
     b24:	08 95       	ret

00000b26 <move_piece_down>:
*		rotation: The rotation of the piece (straight, upside_down, left,right)
* Return value:
*		bool : True(1) if it can be moved down, false(0) if it cannot be placed.
*/
unsigned char move_piece_down(signed char x, signed char y, piece_type_t piece_type, rotation_t rotation)
{
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	f6 2e       	mov	r15, r22
     b36:	e4 2e       	mov	r14, r20
     b38:	d2 2e       	mov	r13, r18
	if (can_place_piece(x, y + 1, piece_type, rotation))
     b3a:	06 2f       	mov	r16, r22
     b3c:	66 0f       	add	r22, r22
     b3e:	11 0b       	sbc	r17, r17
     b40:	0f 5f       	subi	r16, 0xFF	; 255
     b42:	1f 4f       	sbci	r17, 0xFF	; 255
     b44:	c8 2f       	mov	r28, r24
     b46:	88 0f       	add	r24, r24
     b48:	dd 0b       	sbc	r29, r29
     b4a:	b8 01       	movw	r22, r16
     b4c:	ce 01       	movw	r24, r28
     b4e:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     b52:	88 23       	and	r24, r24
     b54:	79 f0       	breq	.+30     	; 0xb74 <move_piece_down+0x4e>
	{
		remove_piece(x, y, piece_type, rotation);
     b56:	6f 2d       	mov	r22, r15
     b58:	ff 0c       	add	r15, r15
     b5a:	77 0b       	sbc	r23, r23
     b5c:	2d 2d       	mov	r18, r13
     b5e:	4e 2d       	mov	r20, r14
     b60:	ce 01       	movw	r24, r28
     b62:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece(x, y + 1, piece_type, rotation);
     b66:	2d 2d       	mov	r18, r13
     b68:	4e 2d       	mov	r20, r14
     b6a:	b8 01       	movw	r22, r16
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		return 1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return 0;

}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	08 95       	ret

00000b84 <move_piece_left>:
*		rotation: The rotation of the piece (straight, upside_down, left,right)
* Return value:
*		bool : True(1) if it can be moved left, false(0) if it cannot be placed.
*/
unsigned char move_piece_left(signed char x, signed char y, piece_type_t piece_type, rotation_t rotation)
{
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	f4 2e       	mov	r15, r20
     b96:	e2 2e       	mov	r14, r18
	if (can_place_piece(x - 1, y, piece_type, rotation))
     b98:	c6 2f       	mov	r28, r22
     b9a:	66 0f       	add	r22, r22
     b9c:	dd 0b       	sbc	r29, r29
     b9e:	08 2f       	mov	r16, r24
     ba0:	88 0f       	add	r24, r24
     ba2:	11 0b       	sbc	r17, r17
     ba4:	68 01       	movw	r12, r16
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	c8 1a       	sub	r12, r24
     baa:	d1 08       	sbc	r13, r1
     bac:	be 01       	movw	r22, r28
     bae:	c6 01       	movw	r24, r12
     bb0:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     bb4:	88 23       	and	r24, r24
     bb6:	69 f0       	breq	.+26     	; 0xbd2 <move_piece_left+0x4e>
	{
		remove_piece(x, y, piece_type, rotation);
     bb8:	2e 2d       	mov	r18, r14
     bba:	4f 2d       	mov	r20, r15
     bbc:	be 01       	movw	r22, r28
     bbe:	c8 01       	movw	r24, r16
     bc0:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece(x - 1, y, piece_type, rotation);
     bc4:	2e 2d       	mov	r18, r14
     bc6:	4f 2d       	mov	r20, r15
     bc8:	be 01       	movw	r22, r28
     bca:	c6 01       	movw	r24, r12
     bcc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		return 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return 0;

}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	08 95       	ret

00000be4 <move_piece_right>:
*		rotation: The rotation of the piece (straight, upside_down, left,right)
* Return value:
*		bool : True(1) if it can be moved right, false(0) if it cannot be placed.
*/
unsigned char move_piece_right(signed char x, signed char y, piece_type_t piece_type, rotation_t rotation)
{
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	f4 2e       	mov	r15, r20
     bf6:	e2 2e       	mov	r14, r18
	if (can_place_piece(x + 1, y, piece_type, rotation))
     bf8:	c6 2f       	mov	r28, r22
     bfa:	66 0f       	add	r22, r22
     bfc:	dd 0b       	sbc	r29, r29
     bfe:	08 2f       	mov	r16, r24
     c00:	88 0f       	add	r24, r24
     c02:	11 0b       	sbc	r17, r17
     c04:	68 01       	movw	r12, r16
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	c8 1a       	sub	r12, r24
     c0a:	d8 0a       	sbc	r13, r24
     c0c:	be 01       	movw	r22, r28
     c0e:	c6 01       	movw	r24, r12
     c10:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     c14:	88 23       	and	r24, r24
     c16:	69 f0       	breq	.+26     	; 0xc32 <move_piece_right+0x4e>
	{
		remove_piece(x, y, piece_type, rotation);
     c18:	2e 2d       	mov	r18, r14
     c1a:	4f 2d       	mov	r20, r15
     c1c:	be 01       	movw	r22, r28
     c1e:	c8 01       	movw	r24, r16
     c20:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece(x + 1, y, piece_type, rotation);
     c24:	2e 2d       	mov	r18, r14
     c26:	4f 2d       	mov	r20, r15
     c28:	be 01       	movw	r22, r28
     c2a:	c6 01       	movw	r24, r12
     c2c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		return 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return 0;

}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	08 95       	ret

00000c44 <rotate_piece_clockwise>:
*		bool : True(1) if it can be rotated, false(0) if it cannot be rotated.
*
* THIS FUNCTION MODIFIES X, Y AND ROTATION
*/
unsigned char rotate_piece_clockwise(signed char * x, signed char * y, piece_type_t *piece_type, rotation_t * rotation)
{
     c44:	3f 92       	push	r3
     c46:	4f 92       	push	r4
     c48:	5f 92       	push	r5
     c4a:	6f 92       	push	r6
     c4c:	7f 92       	push	r7
     c4e:	8f 92       	push	r8
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	6c 01       	movw	r12, r24
     c68:	4b 01       	movw	r8, r22
     c6a:	5a 01       	movw	r10, r20
     c6c:	89 01       	movw	r16, r18
	//TO_DO: IMPLEMENT COMPLEX ROTATION!
	if (can_place_piece(*x, *y, *piece_type, ((*rotation) + 1) & 0x03))
     c6e:	f9 01       	movw	r30, r18
     c70:	30 80       	ld	r3, Z
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	83 0d       	add	r24, r3
     c76:	83 70       	andi	r24, 0x03	; 3
     c78:	78 2e       	mov	r7, r24
     c7a:	fa 01       	movw	r30, r20
     c7c:	40 80       	ld	r4, Z
     c7e:	fb 01       	movw	r30, r22
     c80:	c0 81       	ld	r28, Z
     c82:	0c 2e       	mov	r0, r28
     c84:	00 0c       	add	r0, r0
     c86:	dd 0b       	sbc	r29, r29
     c88:	f6 01       	movw	r30, r12
     c8a:	60 80       	ld	r6, Z
     c8c:	e6 2c       	mov	r14, r6
     c8e:	06 2c       	mov	r0, r6
     c90:	00 0c       	add	r0, r0
     c92:	ff 08       	sbc	r15, r15
     c94:	28 2f       	mov	r18, r24
     c96:	44 2d       	mov	r20, r4
     c98:	be 01       	movw	r22, r28
     c9a:	c7 01       	movw	r24, r14
     c9c:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     ca0:	58 2e       	mov	r5, r24
     ca2:	88 23       	and	r24, r24
     ca4:	01 f1       	breq	.+64     	; 0xce6 <rotate_piece_clockwise+0xa2>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
     ca6:	23 2d       	mov	r18, r3
     ca8:	44 2d       	mov	r20, r4
     caa:	be 01       	movw	r22, r28
     cac:	c7 01       	movw	r24, r14
     cae:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece(*x, *y, *piece_type, ((*rotation) + 1) & 0x03);
     cb2:	f8 01       	movw	r30, r16
     cb4:	20 81       	ld	r18, Z
     cb6:	2f 5f       	subi	r18, 0xFF	; 255
     cb8:	23 70       	andi	r18, 0x03	; 3
     cba:	f4 01       	movw	r30, r8
     cbc:	60 81       	ld	r22, Z
     cbe:	06 2e       	mov	r0, r22
     cc0:	00 0c       	add	r0, r0
     cc2:	77 0b       	sbc	r23, r23
     cc4:	f6 01       	movw	r30, r12
     cc6:	80 81       	ld	r24, Z
     cc8:	f5 01       	movw	r30, r10
     cca:	40 81       	ld	r20, Z
     ccc:	08 2e       	mov	r0, r24
     cce:	00 0c       	add	r0, r0
     cd0:	99 0b       	sbc	r25, r25
     cd2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*rotation) = ((*rotation) + 1) & 0x03;
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 81       	ld	r24, Z
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	83 70       	andi	r24, 0x03	; 3
     cde:	80 83       	st	Z, r24
		return 1;
     ce0:	55 24       	eor	r5, r5
     ce2:	53 94       	inc	r5
     ce4:	c6 c0       	rjmp	.+396    	; 0xe72 <rotate_piece_clockwise+0x22e>
	}
	else if (*x < 0 && can_place_piece((*x) + 1, *y, *piece_type, ((*rotation) + 1) & 0x03))
     ce6:	66 20       	and	r6, r6
     ce8:	74 f5       	brge	.+92     	; 0xd46 <rotate_piece_clockwise+0x102>
     cea:	27 2d       	mov	r18, r7
     cec:	44 2d       	mov	r20, r4
     cee:	be 01       	movw	r22, r28
     cf0:	c7 01       	movw	r24, r14
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     cf8:	88 23       	and	r24, r24
     cfa:	29 f1       	breq	.+74     	; 0xd46 <rotate_piece_clockwise+0x102>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
     cfc:	23 2d       	mov	r18, r3
     cfe:	44 2d       	mov	r20, r4
     d00:	be 01       	movw	r22, r28
     d02:	c7 01       	movw	r24, r14
     d04:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece((*x) + 1, *y, *piece_type, ((*rotation) + 1) & 0x03);
     d08:	f8 01       	movw	r30, r16
     d0a:	20 81       	ld	r18, Z
     d0c:	2f 5f       	subi	r18, 0xFF	; 255
     d0e:	23 70       	andi	r18, 0x03	; 3
     d10:	f4 01       	movw	r30, r8
     d12:	60 81       	ld	r22, Z
     d14:	06 2e       	mov	r0, r22
     d16:	00 0c       	add	r0, r0
     d18:	77 0b       	sbc	r23, r23
     d1a:	f6 01       	movw	r30, r12
     d1c:	80 81       	ld	r24, Z
     d1e:	08 2e       	mov	r0, r24
     d20:	00 0c       	add	r0, r0
     d22:	99 0b       	sbc	r25, r25
     d24:	f5 01       	movw	r30, r10
     d26:	40 81       	ld	r20, Z
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*x)++;
     d2e:	f6 01       	movw	r30, r12
     d30:	80 81       	ld	r24, Z
     d32:	8f 5f       	subi	r24, 0xFF	; 255
     d34:	80 83       	st	Z, r24
		(*rotation) = ((*rotation) + 1) & 0x03;
     d36:	f8 01       	movw	r30, r16
     d38:	80 81       	ld	r24, Z
     d3a:	8f 5f       	subi	r24, 0xFF	; 255
     d3c:	83 70       	andi	r24, 0x03	; 3
     d3e:	80 83       	st	Z, r24
		return 1;
     d40:	55 24       	eor	r5, r5
     d42:	53 94       	inc	r5
     d44:	96 c0       	rjmp	.+300    	; 0xe72 <rotate_piece_clockwise+0x22e>
	}
	else if (*x >(DISPLAY_WIDTH - PIECE_CONTAINER_SIZE) && can_place_piece((*x) - 1, *y, *piece_type, ((*rotation) + 1) & 0x03))
     d46:	f4 e0       	ldi	r31, 0x04	; 4
     d48:	f6 15       	cp	r31, r6
     d4a:	74 f5       	brge	.+92     	; 0xda8 <rotate_piece_clockwise+0x164>
     d4c:	27 2d       	mov	r18, r7
     d4e:	44 2d       	mov	r20, r4
     d50:	be 01       	movw	r22, r28
     d52:	c7 01       	movw	r24, r14
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     d5a:	88 23       	and	r24, r24
     d5c:	29 f1       	breq	.+74     	; 0xda8 <rotate_piece_clockwise+0x164>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
     d5e:	23 2d       	mov	r18, r3
     d60:	44 2d       	mov	r20, r4
     d62:	be 01       	movw	r22, r28
     d64:	c7 01       	movw	r24, r14
     d66:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece((*x) - 1, *y, *piece_type, ((*rotation) + 1) & 0x03);
     d6a:	f8 01       	movw	r30, r16
     d6c:	20 81       	ld	r18, Z
     d6e:	2f 5f       	subi	r18, 0xFF	; 255
     d70:	23 70       	andi	r18, 0x03	; 3
     d72:	f4 01       	movw	r30, r8
     d74:	60 81       	ld	r22, Z
     d76:	06 2e       	mov	r0, r22
     d78:	00 0c       	add	r0, r0
     d7a:	77 0b       	sbc	r23, r23
     d7c:	f6 01       	movw	r30, r12
     d7e:	80 81       	ld	r24, Z
     d80:	08 2e       	mov	r0, r24
     d82:	00 0c       	add	r0, r0
     d84:	99 0b       	sbc	r25, r25
     d86:	f5 01       	movw	r30, r10
     d88:	40 81       	ld	r20, Z
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*x)--;
     d90:	f6 01       	movw	r30, r12
     d92:	80 81       	ld	r24, Z
     d94:	81 50       	subi	r24, 0x01	; 1
     d96:	80 83       	st	Z, r24
		(*rotation) = ((*rotation) + 1) & 0x03;
     d98:	f8 01       	movw	r30, r16
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	83 70       	andi	r24, 0x03	; 3
     da0:	80 83       	st	Z, r24
		return 1;
     da2:	55 24       	eor	r5, r5
     da4:	53 94       	inc	r5
     da6:	65 c0       	rjmp	.+202    	; 0xe72 <rotate_piece_clockwise+0x22e>
	}
	else if (*piece_type == PIECE_I && *x < -1 && can_place_piece((*x) + 2, *y, *piece_type, ((*rotation) + 1) & 0x03))
     da8:	f1 e0       	ldi	r31, 0x01	; 1
     daa:	4f 12       	cpse	r4, r31
     dac:	62 c0       	rjmp	.+196    	; 0xe72 <rotate_piece_clockwise+0x22e>
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	68 16       	cp	r6, r24
     db2:	74 f5       	brge	.+92     	; 0xe10 <rotate_piece_clockwise+0x1cc>
     db4:	27 2d       	mov	r18, r7
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	be 01       	movw	r22, r28
     dba:	c7 01       	movw	r24, r14
     dbc:	02 96       	adiw	r24, 0x02	; 2
     dbe:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     dc2:	88 23       	and	r24, r24
     dc4:	29 f1       	breq	.+74     	; 0xe10 <rotate_piece_clockwise+0x1cc>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
     dc6:	23 2d       	mov	r18, r3
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	be 01       	movw	r22, r28
     dcc:	c7 01       	movw	r24, r14
     dce:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece((*x) + 2, *y, *piece_type, ((*rotation) + 1) & 0x03);
     dd2:	f8 01       	movw	r30, r16
     dd4:	20 81       	ld	r18, Z
     dd6:	2f 5f       	subi	r18, 0xFF	; 255
     dd8:	23 70       	andi	r18, 0x03	; 3
     dda:	f4 01       	movw	r30, r8
     ddc:	60 81       	ld	r22, Z
     dde:	06 2e       	mov	r0, r22
     de0:	00 0c       	add	r0, r0
     de2:	77 0b       	sbc	r23, r23
     de4:	f6 01       	movw	r30, r12
     de6:	80 81       	ld	r24, Z
     de8:	08 2e       	mov	r0, r24
     dea:	00 0c       	add	r0, r0
     dec:	99 0b       	sbc	r25, r25
     dee:	f5 01       	movw	r30, r10
     df0:	40 81       	ld	r20, Z
     df2:	02 96       	adiw	r24, 0x02	; 2
     df4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*x) += 2;
     df8:	f6 01       	movw	r30, r12
     dfa:	80 81       	ld	r24, Z
     dfc:	8e 5f       	subi	r24, 0xFE	; 254
     dfe:	80 83       	st	Z, r24
		(*rotation) = ((*rotation) + 1) & 0x03;
     e00:	f8 01       	movw	r30, r16
     e02:	80 81       	ld	r24, Z
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	83 70       	andi	r24, 0x03	; 3
     e08:	80 83       	st	Z, r24
		return 1;
     e0a:	55 24       	eor	r5, r5
     e0c:	53 94       	inc	r5
     e0e:	31 c0       	rjmp	.+98     	; 0xe72 <rotate_piece_clockwise+0x22e>

	}
	else if (*piece_type == PIECE_I && *x >(DISPLAY_WIDTH - 3) && can_place_piece((*x) - 2, *y, *piece_type, ((*rotation) + 1) & 0x03))
     e10:	f5 e0       	ldi	r31, 0x05	; 5
     e12:	f6 15       	cp	r31, r6
     e14:	74 f5       	brge	.+92     	; 0xe72 <rotate_piece_clockwise+0x22e>
     e16:	27 2d       	mov	r18, r7
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	be 01       	movw	r22, r28
     e1c:	c7 01       	movw	r24, r14
     e1e:	02 97       	sbiw	r24, 0x02	; 2
     e20:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     e24:	58 2e       	mov	r5, r24
     e26:	88 23       	and	r24, r24
     e28:	21 f1       	breq	.+72     	; 0xe72 <rotate_piece_clockwise+0x22e>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
     e2a:	23 2d       	mov	r18, r3
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	be 01       	movw	r22, r28
     e30:	c7 01       	movw	r24, r14
     e32:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece((*x) - 2, *y, *piece_type, ((*rotation) + 1) & 0x03);
     e36:	f8 01       	movw	r30, r16
     e38:	20 81       	ld	r18, Z
     e3a:	2f 5f       	subi	r18, 0xFF	; 255
     e3c:	23 70       	andi	r18, 0x03	; 3
     e3e:	f4 01       	movw	r30, r8
     e40:	60 81       	ld	r22, Z
     e42:	06 2e       	mov	r0, r22
     e44:	00 0c       	add	r0, r0
     e46:	77 0b       	sbc	r23, r23
     e48:	f6 01       	movw	r30, r12
     e4a:	80 81       	ld	r24, Z
     e4c:	08 2e       	mov	r0, r24
     e4e:	00 0c       	add	r0, r0
     e50:	99 0b       	sbc	r25, r25
     e52:	f5 01       	movw	r30, r10
     e54:	40 81       	ld	r20, Z
     e56:	02 97       	sbiw	r24, 0x02	; 2
     e58:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*x) -= 2;
     e5c:	f6 01       	movw	r30, r12
     e5e:	80 81       	ld	r24, Z
     e60:	82 50       	subi	r24, 0x02	; 2
     e62:	80 83       	st	Z, r24
		(*rotation) = ((*rotation) + 1) & 0x03;
     e64:	f8 01       	movw	r30, r16
     e66:	80 81       	ld	r24, Z
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	83 70       	andi	r24, 0x03	; 3
     e6c:	80 83       	st	Z, r24
		return 1;
     e6e:	55 24       	eor	r5, r5
     e70:	53 94       	inc	r5
	}
	else
		return 0;
}
     e72:	85 2d       	mov	r24, r5
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	8f 90       	pop	r8
     e8c:	7f 90       	pop	r7
     e8e:	6f 90       	pop	r6
     e90:	5f 90       	pop	r5
     e92:	4f 90       	pop	r4
     e94:	3f 90       	pop	r3
     e96:	08 95       	ret

00000e98 <rotate_piece_counterclockwise>:
*		bool : True(1) if it can be rotated, false(0) if it cannot be rotated.
*
* THIS FUNCTION MODIFIES X, Y AND ROTATION
*/
unsigned char rotate_piece_counterclockwise(signed char * x, signed char * y, piece_type_t *piece_type, rotation_t * rotation)
{
     e98:	3f 92       	push	r3
     e9a:	4f 92       	push	r4
     e9c:	5f 92       	push	r5
     e9e:	6f 92       	push	r6
     ea0:	7f 92       	push	r7
     ea2:	8f 92       	push	r8
     ea4:	9f 92       	push	r9
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	6c 01       	movw	r12, r24
     ebc:	4b 01       	movw	r8, r22
     ebe:	5a 01       	movw	r10, r20
     ec0:	89 01       	movw	r16, r18
	//TO_DO: IMPLEMENT COMPLEX ROTATION!
	if (can_place_piece(*x, *y, *piece_type, ((*rotation) + 3) & 0x03))
     ec2:	f9 01       	movw	r30, r18
     ec4:	30 80       	ld	r3, Z
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	83 0d       	add	r24, r3
     eca:	83 70       	andi	r24, 0x03	; 3
     ecc:	78 2e       	mov	r7, r24
     ece:	fa 01       	movw	r30, r20
     ed0:	40 80       	ld	r4, Z
     ed2:	fb 01       	movw	r30, r22
     ed4:	c0 81       	ld	r28, Z
     ed6:	0c 2e       	mov	r0, r28
     ed8:	00 0c       	add	r0, r0
     eda:	dd 0b       	sbc	r29, r29
     edc:	f6 01       	movw	r30, r12
     ede:	60 80       	ld	r6, Z
     ee0:	e6 2c       	mov	r14, r6
     ee2:	06 2c       	mov	r0, r6
     ee4:	00 0c       	add	r0, r0
     ee6:	ff 08       	sbc	r15, r15
     ee8:	28 2f       	mov	r18, r24
     eea:	44 2d       	mov	r20, r4
     eec:	be 01       	movw	r22, r28
     eee:	c7 01       	movw	r24, r14
     ef0:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     ef4:	58 2e       	mov	r5, r24
     ef6:	88 23       	and	r24, r24
     ef8:	01 f1       	breq	.+64     	; 0xf3a <rotate_piece_counterclockwise+0xa2>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
     efa:	23 2d       	mov	r18, r3
     efc:	44 2d       	mov	r20, r4
     efe:	be 01       	movw	r22, r28
     f00:	c7 01       	movw	r24, r14
     f02:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece(*x, *y, *piece_type, ((*rotation) + 3) & 0x03);
     f06:	f8 01       	movw	r30, r16
     f08:	20 81       	ld	r18, Z
     f0a:	2d 5f       	subi	r18, 0xFD	; 253
     f0c:	23 70       	andi	r18, 0x03	; 3
     f0e:	f4 01       	movw	r30, r8
     f10:	60 81       	ld	r22, Z
     f12:	06 2e       	mov	r0, r22
     f14:	00 0c       	add	r0, r0
     f16:	77 0b       	sbc	r23, r23
     f18:	f6 01       	movw	r30, r12
     f1a:	80 81       	ld	r24, Z
     f1c:	f5 01       	movw	r30, r10
     f1e:	40 81       	ld	r20, Z
     f20:	08 2e       	mov	r0, r24
     f22:	00 0c       	add	r0, r0
     f24:	99 0b       	sbc	r25, r25
     f26:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*rotation) = ((*rotation) + 3) & 0x03;
     f2a:	f8 01       	movw	r30, r16
     f2c:	80 81       	ld	r24, Z
     f2e:	8d 5f       	subi	r24, 0xFD	; 253
     f30:	83 70       	andi	r24, 0x03	; 3
     f32:	80 83       	st	Z, r24
		return 1;
     f34:	55 24       	eor	r5, r5
     f36:	53 94       	inc	r5
     f38:	c6 c0       	rjmp	.+396    	; 0x10c6 <rotate_piece_counterclockwise+0x22e>
	}
	else if (*x < 0 && can_place_piece((*x) + 1, *y, *piece_type, ((*rotation) + 3) & 0x03))
     f3a:	66 20       	and	r6, r6
     f3c:	74 f5       	brge	.+92     	; 0xf9a <rotate_piece_counterclockwise+0x102>
     f3e:	27 2d       	mov	r18, r7
     f40:	44 2d       	mov	r20, r4
     f42:	be 01       	movw	r22, r28
     f44:	c7 01       	movw	r24, r14
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     f4c:	88 23       	and	r24, r24
     f4e:	29 f1       	breq	.+74     	; 0xf9a <rotate_piece_counterclockwise+0x102>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
     f50:	23 2d       	mov	r18, r3
     f52:	44 2d       	mov	r20, r4
     f54:	be 01       	movw	r22, r28
     f56:	c7 01       	movw	r24, r14
     f58:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece((*x) + 1, *y, *piece_type, ((*rotation) + 3) & 0x03);
     f5c:	f8 01       	movw	r30, r16
     f5e:	20 81       	ld	r18, Z
     f60:	2d 5f       	subi	r18, 0xFD	; 253
     f62:	23 70       	andi	r18, 0x03	; 3
     f64:	f4 01       	movw	r30, r8
     f66:	60 81       	ld	r22, Z
     f68:	06 2e       	mov	r0, r22
     f6a:	00 0c       	add	r0, r0
     f6c:	77 0b       	sbc	r23, r23
     f6e:	f6 01       	movw	r30, r12
     f70:	80 81       	ld	r24, Z
     f72:	08 2e       	mov	r0, r24
     f74:	00 0c       	add	r0, r0
     f76:	99 0b       	sbc	r25, r25
     f78:	f5 01       	movw	r30, r10
     f7a:	40 81       	ld	r20, Z
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*x)++;
     f82:	f6 01       	movw	r30, r12
     f84:	80 81       	ld	r24, Z
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	80 83       	st	Z, r24
		(*rotation) = ((*rotation) + 3) & 0x03;
     f8a:	f8 01       	movw	r30, r16
     f8c:	80 81       	ld	r24, Z
     f8e:	8d 5f       	subi	r24, 0xFD	; 253
     f90:	83 70       	andi	r24, 0x03	; 3
     f92:	80 83       	st	Z, r24
		return 1;
     f94:	55 24       	eor	r5, r5
     f96:	53 94       	inc	r5
     f98:	96 c0       	rjmp	.+300    	; 0x10c6 <rotate_piece_counterclockwise+0x22e>
	}
	else if (*x >(DISPLAY_WIDTH - PIECE_CONTAINER_SIZE) && can_place_piece((*x) - 1, *y, *piece_type, ((*rotation) + 3) & 0x03))
     f9a:	f4 e0       	ldi	r31, 0x04	; 4
     f9c:	f6 15       	cp	r31, r6
     f9e:	74 f5       	brge	.+92     	; 0xffc <rotate_piece_counterclockwise+0x164>
     fa0:	27 2d       	mov	r18, r7
     fa2:	44 2d       	mov	r20, r4
     fa4:	be 01       	movw	r22, r28
     fa6:	c7 01       	movw	r24, r14
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
     fae:	88 23       	and	r24, r24
     fb0:	29 f1       	breq	.+74     	; 0xffc <rotate_piece_counterclockwise+0x164>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
     fb2:	23 2d       	mov	r18, r3
     fb4:	44 2d       	mov	r20, r4
     fb6:	be 01       	movw	r22, r28
     fb8:	c7 01       	movw	r24, r14
     fba:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece((*x) - 1, *y, *piece_type, ((*rotation) + 3) & 0x03);
     fbe:	f8 01       	movw	r30, r16
     fc0:	20 81       	ld	r18, Z
     fc2:	2d 5f       	subi	r18, 0xFD	; 253
     fc4:	23 70       	andi	r18, 0x03	; 3
     fc6:	f4 01       	movw	r30, r8
     fc8:	60 81       	ld	r22, Z
     fca:	06 2e       	mov	r0, r22
     fcc:	00 0c       	add	r0, r0
     fce:	77 0b       	sbc	r23, r23
     fd0:	f6 01       	movw	r30, r12
     fd2:	80 81       	ld	r24, Z
     fd4:	08 2e       	mov	r0, r24
     fd6:	00 0c       	add	r0, r0
     fd8:	99 0b       	sbc	r25, r25
     fda:	f5 01       	movw	r30, r10
     fdc:	40 81       	ld	r20, Z
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*x)--;
     fe4:	f6 01       	movw	r30, r12
     fe6:	80 81       	ld	r24, Z
     fe8:	81 50       	subi	r24, 0x01	; 1
     fea:	80 83       	st	Z, r24
		(*rotation) = ((*rotation) + 3) & 0x03;
     fec:	f8 01       	movw	r30, r16
     fee:	80 81       	ld	r24, Z
     ff0:	8d 5f       	subi	r24, 0xFD	; 253
     ff2:	83 70       	andi	r24, 0x03	; 3
     ff4:	80 83       	st	Z, r24
		return 1;
     ff6:	55 24       	eor	r5, r5
     ff8:	53 94       	inc	r5
     ffa:	65 c0       	rjmp	.+202    	; 0x10c6 <rotate_piece_counterclockwise+0x22e>
	}
	else if (*piece_type == PIECE_I && *x < -1 && can_place_piece((*x) + 2, *y, *piece_type, ((*rotation) + 3) & 0x03))
     ffc:	f1 e0       	ldi	r31, 0x01	; 1
     ffe:	4f 12       	cpse	r4, r31
    1000:	62 c0       	rjmp	.+196    	; 0x10c6 <rotate_piece_counterclockwise+0x22e>
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	68 16       	cp	r6, r24
    1006:	74 f5       	brge	.+92     	; 0x1064 <rotate_piece_counterclockwise+0x1cc>
    1008:	27 2d       	mov	r18, r7
    100a:	41 e0       	ldi	r20, 0x01	; 1
    100c:	be 01       	movw	r22, r28
    100e:	c7 01       	movw	r24, r14
    1010:	02 96       	adiw	r24, 0x02	; 2
    1012:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
    1016:	88 23       	and	r24, r24
    1018:	29 f1       	breq	.+74     	; 0x1064 <rotate_piece_counterclockwise+0x1cc>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
    101a:	23 2d       	mov	r18, r3
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	be 01       	movw	r22, r28
    1020:	c7 01       	movw	r24, r14
    1022:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece((*x) + 2, *y, *piece_type, ((*rotation) + 3) & 0x03);
    1026:	f8 01       	movw	r30, r16
    1028:	20 81       	ld	r18, Z
    102a:	2d 5f       	subi	r18, 0xFD	; 253
    102c:	23 70       	andi	r18, 0x03	; 3
    102e:	f4 01       	movw	r30, r8
    1030:	60 81       	ld	r22, Z
    1032:	06 2e       	mov	r0, r22
    1034:	00 0c       	add	r0, r0
    1036:	77 0b       	sbc	r23, r23
    1038:	f6 01       	movw	r30, r12
    103a:	80 81       	ld	r24, Z
    103c:	08 2e       	mov	r0, r24
    103e:	00 0c       	add	r0, r0
    1040:	99 0b       	sbc	r25, r25
    1042:	f5 01       	movw	r30, r10
    1044:	40 81       	ld	r20, Z
    1046:	02 96       	adiw	r24, 0x02	; 2
    1048:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*x) += 2;
    104c:	f6 01       	movw	r30, r12
    104e:	80 81       	ld	r24, Z
    1050:	8e 5f       	subi	r24, 0xFE	; 254
    1052:	80 83       	st	Z, r24
		(*rotation) = ((*rotation) + 3) & 0x03;
    1054:	f8 01       	movw	r30, r16
    1056:	80 81       	ld	r24, Z
    1058:	8d 5f       	subi	r24, 0xFD	; 253
    105a:	83 70       	andi	r24, 0x03	; 3
    105c:	80 83       	st	Z, r24
		return 1;
    105e:	55 24       	eor	r5, r5
    1060:	53 94       	inc	r5
    1062:	31 c0       	rjmp	.+98     	; 0x10c6 <rotate_piece_counterclockwise+0x22e>

	}
	else if (*piece_type == PIECE_I && *x >(DISPLAY_WIDTH - 3) && can_place_piece((*x) - 2, *y, *piece_type, ((*rotation) + 3) & 0x03))
    1064:	f5 e0       	ldi	r31, 0x05	; 5
    1066:	f6 15       	cp	r31, r6
    1068:	74 f5       	brge	.+92     	; 0x10c6 <rotate_piece_counterclockwise+0x22e>
    106a:	27 2d       	mov	r18, r7
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	be 01       	movw	r22, r28
    1070:	c7 01       	movw	r24, r14
    1072:	02 97       	sbiw	r24, 0x02	; 2
    1074:	0e 94 2a 04 	call	0x854	; 0x854 <can_place_piece>
    1078:	58 2e       	mov	r5, r24
    107a:	88 23       	and	r24, r24
    107c:	21 f1       	breq	.+72     	; 0x10c6 <rotate_piece_counterclockwise+0x22e>
	{
		remove_piece(*x, *y, *piece_type, *rotation);
    107e:	23 2d       	mov	r18, r3
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	be 01       	movw	r22, r28
    1084:	c7 01       	movw	r24, r14
    1086:	0e 94 9e 04 	call	0x93c	; 0x93c <remove_piece>
		place_falling_piece((*x) - 2, *y, *piece_type, ((*rotation) + 3) & 0x03);
    108a:	f8 01       	movw	r30, r16
    108c:	20 81       	ld	r18, Z
    108e:	2d 5f       	subi	r18, 0xFD	; 253
    1090:	23 70       	andi	r18, 0x03	; 3
    1092:	f4 01       	movw	r30, r8
    1094:	60 81       	ld	r22, Z
    1096:	06 2e       	mov	r0, r22
    1098:	00 0c       	add	r0, r0
    109a:	77 0b       	sbc	r23, r23
    109c:	f6 01       	movw	r30, r12
    109e:	80 81       	ld	r24, Z
    10a0:	08 2e       	mov	r0, r24
    10a2:	00 0c       	add	r0, r0
    10a4:	99 0b       	sbc	r25, r25
    10a6:	f5 01       	movw	r30, r10
    10a8:	40 81       	ld	r20, Z
    10aa:	02 97       	sbiw	r24, 0x02	; 2
    10ac:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
		(*x) -= 2;
    10b0:	f6 01       	movw	r30, r12
    10b2:	80 81       	ld	r24, Z
    10b4:	82 50       	subi	r24, 0x02	; 2
    10b6:	80 83       	st	Z, r24
		(*rotation) = ((*rotation) + 3) & 0x03;
    10b8:	f8 01       	movw	r30, r16
    10ba:	80 81       	ld	r24, Z
    10bc:	8d 5f       	subi	r24, 0xFD	; 253
    10be:	83 70       	andi	r24, 0x03	; 3
    10c0:	80 83       	st	Z, r24
		return 1;
    10c2:	55 24       	eor	r5, r5
    10c4:	53 94       	inc	r5
	}
	else
		return 0;
}
    10c6:	85 2d       	mov	r24, r5
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	9f 90       	pop	r9
    10de:	8f 90       	pop	r8
    10e0:	7f 90       	pop	r7
    10e2:	6f 90       	pop	r6
    10e4:	5f 90       	pop	r5
    10e6:	4f 90       	pop	r4
    10e8:	3f 90       	pop	r3
    10ea:	08 95       	ret

000010ec <check_cleared_rows>:
	unsigned char rows_to_clear = 0x00;
	char moving_mask = 0x01;
	char row_flag;
	//printf("Called with %d\n",y_cord);
	//sleep(1);
	for (y = y_cord; y < (DISPLAY_HEIGHT + HIDDEN_ROWS) && y < (y_cord + PIECE_CONTAINER_SIZE); y++, moving_mask <<= 1)
    10ec:	48 2f       	mov	r20, r24
    10ee:	84 32       	cpi	r24, 0x24	; 36
    10f0:	c4 f5       	brge	.+112    	; 0x1162 <check_cleared_rows+0x76>
    10f2:	28 2f       	mov	r18, r24
    10f4:	08 2e       	mov	r0, r24
    10f6:	00 0c       	add	r0, r0
    10f8:	33 0b       	sbc	r19, r19
    10fa:	68 2f       	mov	r22, r24
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	6c 5f       	subi	r22, 0xFC	; 252
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	26 17       	cp	r18, r22
    1104:	37 07       	cpc	r19, r23
    1106:	e4 f0       	brlt	.+56     	; 0x1140 <check_cleared_rows+0x54>
*
*/
unsigned char check_cleared_rows(unsigned char y_cord)
{
	signed char x, y;
	unsigned char rows_to_clear = 0x00;
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	08 95       	ret
	//printf("Called with %d\n",y_cord);
	//sleep(1);
	for (y = y_cord; y < (DISPLAY_HEIGHT + HIDDEN_ROWS) && y < (y_cord + PIECE_CONTAINER_SIZE); y++, moving_mask <<= 1)
	{
		for (x = 0, row_flag = 1; x < DISPLAY_WIDTH; x++)
			if ((*board[y])[x].piece_type == NO_PIECE)
    110c:	fd 01       	movw	r30, r26
    110e:	e2 0f       	add	r30, r18
    1110:	f3 1f       	adc	r31, r19
    1112:	90 81       	ld	r25, Z
    1114:	92 95       	swap	r25
    1116:	96 95       	lsr	r25
    1118:	97 70       	andi	r25, 0x07	; 7
    111a:	31 f0       	breq	.+12     	; 0x1128 <check_cleared_rows+0x3c>
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
	char row_flag;
	//printf("Called with %d\n",y_cord);
	//sleep(1);
	for (y = y_cord; y < (DISPLAY_HEIGHT + HIDDEN_ROWS) && y < (y_cord + PIECE_CONTAINER_SIZE); y++, moving_mask <<= 1)
	{
		for (x = 0, row_flag = 1; x < DISPLAY_WIDTH; x++)
    1120:	28 30       	cpi	r18, 0x08	; 8
    1122:	31 05       	cpc	r19, r1
    1124:	99 f7       	brne	.-26     	; 0x110c <check_cleared_rows+0x20>
    1126:	1f c0       	rjmp	.+62     	; 0x1166 <check_cleared_rows+0x7a>
    1128:	4f 5f       	subi	r20, 0xFF	; 255
	unsigned char rows_to_clear = 0x00;
	char moving_mask = 0x01;
	char row_flag;
	//printf("Called with %d\n",y_cord);
	//sleep(1);
	for (y = y_cord; y < (DISPLAY_HEIGHT + HIDDEN_ROWS) && y < (y_cord + PIECE_CONTAINER_SIZE); y++, moving_mask <<= 1)
    112a:	55 0f       	add	r21, r21
    112c:	44 32       	cpi	r20, 0x24	; 36
    112e:	e9 f0       	breq	.+58     	; 0x116a <check_cleared_rows+0x7e>
    1130:	24 2f       	mov	r18, r20
    1132:	04 2e       	mov	r0, r20
    1134:	00 0c       	add	r0, r0
    1136:	33 0b       	sbc	r19, r19
    1138:	26 17       	cp	r18, r22
    113a:	37 07       	cpc	r19, r23
    113c:	1c f0       	brlt	.+6      	; 0x1144 <check_cleared_rows+0x58>
    113e:	08 95       	ret
    1140:	51 e0       	ldi	r21, 0x01	; 1
    1142:	80 e0       	ldi	r24, 0x00	; 0
	{
		for (x = 0, row_flag = 1; x < DISPLAY_WIDTH; x++)
			if ((*board[y])[x].piece_type == NO_PIECE)
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	f9 01       	movw	r30, r18
    114a:	e7 5b       	subi	r30, 0xB7	; 183
    114c:	f9 4f       	sbci	r31, 0xF9	; 249
    114e:	a0 81       	ld	r26, Z
    1150:	b1 81       	ldd	r27, Z+1	; 0x01
    1152:	9c 91       	ld	r25, X
    1154:	92 95       	swap	r25
    1156:	96 95       	lsr	r25
    1158:	97 70       	andi	r25, 0x07	; 7
    115a:	31 f3       	breq	.-52     	; 0x1128 <check_cleared_rows+0x3c>
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	d5 cf       	rjmp	.-86     	; 0x110c <check_cleared_rows+0x20>
*
*/
unsigned char check_cleared_rows(unsigned char y_cord)
{
	signed char x, y;
	unsigned char rows_to_clear = 0x00;
    1162:	80 e0       	ldi	r24, 0x00	; 0
			}
		if (row_flag)
			rows_to_clear |= moving_mask;

	}
	return rows_to_clear;
    1164:	08 95       	ret
			{
				row_flag = 0;
				break;
			}
		if (row_flag)
			rows_to_clear |= moving_mask;
    1166:	85 2b       	or	r24, r21
    1168:	df cf       	rjmp	.-66     	; 0x1128 <check_cleared_rows+0x3c>

	}
	return rows_to_clear;

}
    116a:	08 95       	ret

0000116c <move_line_to_top>:
*	 -line_row: the row in the array which will be move to the top row (first hidden row).
*/
void move_line_to_top(unsigned char line_row)
{
	block_t(*temp_line)[DISPLAY_WIDTH];
	for (; line_row > 0; --line_row)
    116c:	88 23       	and	r24, r24
    116e:	b1 f0       	breq	.+44     	; 0x119c <move_line_to_top+0x30>
	{
		temp_line = board[line_row];
    1170:	e8 2f       	mov	r30, r24
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	df 01       	movw	r26, r30
    1176:	aa 0f       	add	r26, r26
    1178:	bb 1f       	adc	r27, r27
    117a:	a7 5b       	subi	r26, 0xB7	; 183
    117c:	b9 4f       	sbci	r27, 0xF9	; 249
    117e:	2d 91       	ld	r18, X+
    1180:	3c 91       	ld	r19, X
    1182:	11 97       	sbiw	r26, 0x01	; 1
		board[line_row] = board[line_row - 1];
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	e9 5b       	subi	r30, 0xB9	; 185
    118a:	f9 4f       	sbci	r31, 0xF9	; 249
    118c:	40 81       	ld	r20, Z
    118e:	51 81       	ldd	r21, Z+1	; 0x01
    1190:	4d 93       	st	X+, r20
    1192:	5c 93       	st	X, r21
		board[line_row - 1] = temp_line;
    1194:	31 83       	std	Z+1, r19	; 0x01
    1196:	20 83       	st	Z, r18
*	 -line_row: the row in the array which will be move to the top row (first hidden row).
*/
void move_line_to_top(unsigned char line_row)
{
	block_t(*temp_line)[DISPLAY_WIDTH];
	for (; line_row > 0; --line_row)
    1198:	81 50       	subi	r24, 0x01	; 1
    119a:	51 f7       	brne	.-44     	; 0x1170 <move_line_to_top+0x4>
    119c:	08 95       	ret

0000119e <is_game_over>:
*		0: game is not over
* The function checks 4 invisible line above playing rows if any block is present then the game is over
*
*/
unsigned char is_game_over(void)
{
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	c9 e4       	ldi	r28, 0x49	; 73
    11a4:	d6 e0       	ldi	r29, 0x06	; 6
    11a6:	41 e5       	ldi	r20, 0x51	; 81
    11a8:	56 e0       	ldi	r21, 0x06	; 6
    11aa:	11 c0       	rjmp	.+34     	; 0x11ce <is_game_over+0x30>
	int i, j;
	for (i = 0; i < HIDDEN_ROWS; i++)
		for (j = 0; j < DISPLAY_WIDTH; j++)
			if ((*board[i])[j].piece_type != NO_PIECE)
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fd 01       	movw	r30, r26
    11b2:	e8 0f       	add	r30, r24
    11b4:	f9 1f       	adc	r31, r25
    11b6:	20 81       	ld	r18, Z
    11b8:	22 95       	swap	r18
    11ba:	26 95       	lsr	r18
    11bc:	27 70       	andi	r18, 0x07	; 7
    11be:	81 f4       	brne	.+32     	; 0x11e0 <is_game_over+0x42>
*/
unsigned char is_game_over(void)
{
	int i, j;
	for (i = 0; i < HIDDEN_ROWS; i++)
		for (j = 0; j < DISPLAY_WIDTH; j++)
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	88 30       	cpi	r24, 0x08	; 8
    11c4:	91 05       	cpc	r25, r1
    11c6:	a1 f7       	brne	.-24     	; 0x11b0 <is_game_over+0x12>
*
*/
unsigned char is_game_over(void)
{
	int i, j;
	for (i = 0; i < HIDDEN_ROWS; i++)
    11c8:	c4 17       	cp	r28, r20
    11ca:	d5 07       	cpc	r29, r21
    11cc:	59 f0       	breq	.+22     	; 0x11e4 <is_game_over+0x46>
		for (j = 0; j < DISPLAY_WIDTH; j++)
			if ((*board[i])[j].piece_type != NO_PIECE)
    11ce:	a9 91       	ld	r26, Y+
    11d0:	b9 91       	ld	r27, Y+
    11d2:	8c 91       	ld	r24, X
    11d4:	82 95       	swap	r24
    11d6:	86 95       	lsr	r24
    11d8:	87 70       	andi	r24, 0x07	; 7
    11da:	41 f3       	breq	.-48     	; 0x11ac <is_game_over+0xe>
				return 1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <is_game_over+0x48>
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <is_game_over+0x48>
	return 0;
    11e4:	80 e0       	ldi	r24, 0x00	; 0
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <manage_button_down>:
*	-move_piece_left : moves the active tetris piece left if possible.
*	-rotate_piece_clockwise : rotates the piece clockwise/right if possible.
*	-rotate_piece_counterclockwise : rotates the piece counterclockwise/left if possible.
*/
void manage_button_down(signed char * x, signed char * y, piece_type_t * piece, rotation_t * rotation, EVENT_T * ev, unsigned char *drop_piece_f, game_states_t * current_state)
{
    11ec:	8f 92       	push	r8
    11ee:	9f 92       	push	r9
    11f0:	af 92       	push	r10
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
	switch (ev->data)//Possible buttons to press
    1204:	d8 01       	movw	r26, r16
    1206:	11 96       	adiw	r26, 0x01	; 1
    1208:	ec 91       	ld	r30, X
    120a:	8e 2e       	mov	r8, r30
    120c:	91 2c       	mov	r9, r1
    120e:	b7 e0       	ldi	r27, 0x07	; 7
    1210:	8b 16       	cp	r8, r27
    1212:	91 04       	cpc	r9, r1
    1214:	08 f0       	brcs	.+2      	; 0x1218 <manage_button_down+0x2c>
    1216:	4b c0       	rjmp	.+150    	; 0x12ae <manage_button_down+0xc2>
    1218:	d6 01       	movw	r26, r12
    121a:	8b 01       	movw	r16, r22
    121c:	ec 01       	movw	r28, r24
    121e:	f4 01       	movw	r30, r8
    1220:	ec 5c       	subi	r30, 0xCC	; 204
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__tablejump2__>
	{
	case JOYSTICK_UP:
		*drop_piece_f = 1; //Me parece que conviene como un estado pq es muy cabeza como esta pero nose...
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	f7 01       	movw	r30, r14
    122c:	80 83       	st	Z, r24
		set_timer_period_ms(TIMER_0, 50); //Lo mas rapido que se banca
    122e:	62 e3       	ldi	r22, 0x32	; 50
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
		break;
    1238:	3a c0       	rjmp	.+116    	; 0x12ae <manage_button_down+0xc2>

	case JOYSTICK_LEFT:
		if (move_piece_left(*x, *y, *piece, *rotation))
    123a:	d9 01       	movw	r26, r18
    123c:	2c 91       	ld	r18, X
    123e:	fa 01       	movw	r30, r20
    1240:	40 81       	ld	r20, Z
    1242:	db 01       	movw	r26, r22
    1244:	6c 91       	ld	r22, X
    1246:	88 81       	ld	r24, Y
    1248:	0e 94 c2 05 	call	0xb84	; 0xb84 <move_piece_left>
    124c:	88 23       	and	r24, r24
    124e:	79 f1       	breq	.+94     	; 0x12ae <manage_button_down+0xc2>
			--(*x);
    1250:	88 81       	ld	r24, Y
    1252:	81 50       	subi	r24, 0x01	; 1
    1254:	88 83       	st	Y, r24
    1256:	2b c0       	rjmp	.+86     	; 0x12ae <manage_button_down+0xc2>
		break;

	case JOYSTICK_DOWN:
		if (move_piece_down(*x, *y, *piece, *rotation))
    1258:	f9 01       	movw	r30, r18
    125a:	20 81       	ld	r18, Z
    125c:	da 01       	movw	r26, r20
    125e:	4c 91       	ld	r20, X
    1260:	fb 01       	movw	r30, r22
    1262:	60 81       	ld	r22, Z
    1264:	88 81       	ld	r24, Y
    1266:	0e 94 93 05 	call	0xb26	; 0xb26 <move_piece_down>
    126a:	88 23       	and	r24, r24
    126c:	01 f1       	breq	.+64     	; 0x12ae <manage_button_down+0xc2>
			++(*y);
    126e:	d8 01       	movw	r26, r16
    1270:	8c 91       	ld	r24, X
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	8c 93       	st	X, r24
    1276:	1b c0       	rjmp	.+54     	; 0x12ae <manage_button_down+0xc2>
		break;

	case JOYSTICK_RIGHT:
		if (move_piece_right(*x, *y, *piece, *rotation))
    1278:	f9 01       	movw	r30, r18
    127a:	20 81       	ld	r18, Z
    127c:	da 01       	movw	r26, r20
    127e:	4c 91       	ld	r20, X
    1280:	fb 01       	movw	r30, r22
    1282:	60 81       	ld	r22, Z
    1284:	88 81       	ld	r24, Y
    1286:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <move_piece_right>
    128a:	88 23       	and	r24, r24
    128c:	81 f0       	breq	.+32     	; 0x12ae <manage_button_down+0xc2>
			++(*x);
    128e:	88 81       	ld	r24, Y
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	88 83       	st	Y, r24
    1294:	0c c0       	rjmp	.+24     	; 0x12ae <manage_button_down+0xc2>
		break;

	case ROTATE_COUNT:
		if (rotate_piece_counterclockwise(x, y, piece, rotation))
    1296:	0e 94 4c 07 	call	0xe98	; 0xe98 <rotate_piece_counterclockwise>
			;
		break;
    129a:	09 c0       	rjmp	.+18     	; 0x12ae <manage_button_down+0xc2>

	case ROTATE_CLOCK:
		if (rotate_piece_clockwise(x, y, piece, rotation))
    129c:	0e 94 22 06 	call	0xc44	; 0xc44 <rotate_piece_clockwise>
			;
		break;
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <manage_button_down+0xc2>

	case PAUSE: // Pause button
		if (*y >= 3)
    12a2:	fb 01       	movw	r30, r22
    12a4:	80 81       	ld	r24, Z
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	14 f0       	brlt	.+4      	; 0x12ae <manage_button_down+0xc2>
			*current_state = GAME_PAUSED;
    12aa:	84 e0       	ldi	r24, 0x04	; 4
    12ac:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	df 90       	pop	r13
    12bc:	cf 90       	pop	r12
    12be:	bf 90       	pop	r11
    12c0:	af 90       	pop	r10
    12c2:	9f 90       	pop	r9
    12c4:	8f 90       	pop	r8
    12c6:	08 95       	ret

000012c8 <clear_line>:
	int x;
	empty.fall_piece = 0;
	empty.redraw = 1;
	empty.piece_type = NO_PIECE;

	for (x = 0; x < DISPLAY_WIDTH; x++)
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
		(*board[y_cord])[x] = empty;
    12cc:	a8 2f       	mov	r26, r24
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	aa 0f       	add	r26, r26
    12d2:	bb 1f       	adc	r27, r27
    12d4:	a7 5b       	subi	r26, 0xB7	; 183
    12d6:	b9 4f       	sbci	r27, 0xF9	; 249
    12d8:	ed 91       	ld	r30, X+
    12da:	fc 91       	ld	r31, X
    12dc:	11 97       	sbiw	r26, 0x01	; 1
    12de:	e2 0f       	add	r30, r18
    12e0:	f3 1f       	adc	r31, r19
    12e2:	90 81       	ld	r25, Z
    12e4:	9c 71       	andi	r25, 0x1C	; 28
    12e6:	92 60       	ori	r25, 0x02	; 2
    12e8:	90 83       	st	Z, r25
	int x;
	empty.fall_piece = 0;
	empty.redraw = 1;
	empty.piece_type = NO_PIECE;

	for (x = 0; x < DISPLAY_WIDTH; x++)
    12ea:	2f 5f       	subi	r18, 0xFF	; 255
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	28 30       	cpi	r18, 0x08	; 8
    12f0:	31 05       	cpc	r19, r1
    12f2:	91 f7       	brne	.-28     	; 0x12d8 <clear_line+0x10>
		(*board[y_cord])[x] = empty;
}
    12f4:	08 95       	ret

000012f6 <move_line_up>:

void move_line_up(unsigned char y_cord)
{
	block_t(*temp_line)[DISPLAY_WIDTH];
	temp_line = board[y_cord];
    12f6:	e8 2f       	mov	r30, r24
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	df 01       	movw	r26, r30
    12fc:	aa 0f       	add	r26, r26
    12fe:	bb 1f       	adc	r27, r27
    1300:	a7 5b       	subi	r26, 0xB7	; 183
    1302:	b9 4f       	sbci	r27, 0xF9	; 249
    1304:	8d 91       	ld	r24, X+
    1306:	9c 91       	ld	r25, X
    1308:	11 97       	sbiw	r26, 0x01	; 1
	board[y_cord] = board[y_cord - 1];
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	e9 5b       	subi	r30, 0xB9	; 185
    1310:	f9 4f       	sbci	r31, 0xF9	; 249
    1312:	20 81       	ld	r18, Z
    1314:	31 81       	ldd	r19, Z+1	; 0x01
    1316:	2d 93       	st	X+, r18
    1318:	3c 93       	st	X, r19
	board[y_cord - 1] = temp_line;
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	80 83       	st	Z, r24
    131e:	08 95       	ret

00001320 <place_piece_line>:
	int x;
	block_t piece_block;
	piece_block.fall_piece = 0;
	piece_block.redraw = 1;
	piece_block.piece_type = piece;
	for (x = 0; x < DISPLAY_WIDTH; x++)
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
		(*board[y_cord])[x] = piece_block;
    1324:	a8 2f       	mov	r26, r24
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	aa 0f       	add	r26, r26
    132a:	bb 1f       	adc	r27, r27
    132c:	a7 5b       	subi	r26, 0xB7	; 183
    132e:	b9 4f       	sbci	r27, 0xF9	; 249
    1330:	62 95       	swap	r22
    1332:	66 0f       	add	r22, r22
    1334:	60 7e       	andi	r22, 0xE0	; 224
    1336:	ed 91       	ld	r30, X+
    1338:	fc 91       	ld	r31, X
    133a:	11 97       	sbiw	r26, 0x01	; 1
    133c:	e2 0f       	add	r30, r18
    133e:	f3 1f       	adc	r31, r19
    1340:	90 81       	ld	r25, Z
    1342:	9c 71       	andi	r25, 0x1C	; 28
    1344:	92 60       	ori	r25, 0x02	; 2
    1346:	96 2b       	or	r25, r22
    1348:	90 83       	st	Z, r25
	int x;
	block_t piece_block;
	piece_block.fall_piece = 0;
	piece_block.redraw = 1;
	piece_block.piece_type = piece;
	for (x = 0; x < DISPLAY_WIDTH; x++)
    134a:	2f 5f       	subi	r18, 0xFF	; 255
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	28 30       	cpi	r18, 0x08	; 8
    1350:	31 05       	cpc	r19, r1
    1352:	89 f7       	brne	.-30     	; 0x1336 <place_piece_line+0x16>
		(*board[y_cord])[x] = piece_block;
}
    1354:	08 95       	ret

00001356 <set_row_redraw>:

void set_row_redraw(unsigned char y_cord)
{
	int x;
	for (x = 0; x < DISPLAY_WIDTH; x++)
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
		(*board[y_cord])[x].redraw = 1;
    135a:	a8 2f       	mov	r26, r24
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	aa 0f       	add	r26, r26
    1360:	bb 1f       	adc	r27, r27
    1362:	a7 5b       	subi	r26, 0xB7	; 183
    1364:	b9 4f       	sbci	r27, 0xF9	; 249
    1366:	ed 91       	ld	r30, X+
    1368:	fc 91       	ld	r31, X
    136a:	11 97       	sbiw	r26, 0x01	; 1
    136c:	e2 0f       	add	r30, r18
    136e:	f3 1f       	adc	r31, r19
    1370:	90 81       	ld	r25, Z
    1372:	92 60       	ori	r25, 0x02	; 2
    1374:	90 83       	st	Z, r25
}

void set_row_redraw(unsigned char y_cord)
{
	int x;
	for (x = 0; x < DISPLAY_WIDTH; x++)
    1376:	2f 5f       	subi	r18, 0xFF	; 255
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	28 30       	cpi	r18, 0x08	; 8
    137c:	31 05       	cpc	r19, r1
    137e:	99 f7       	brne	.-26     	; 0x1366 <set_row_redraw+0x10>
		(*board[y_cord])[x].redraw = 1;
}
    1380:	08 95       	ret

00001382 <game_end_animation>:
	}
}


unsigned char game_end_animation(signed char * y, piece_type_t last_piece_placed)
{
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	ec 01       	movw	r28, r24
	static unsigned char first_call = 1;
	unsigned char animation_finished = 0; //bool
	if (first_call)
    1388:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <first_call.2441>
    138c:	88 23       	and	r24, r24
    138e:	69 f0       	breq	.+26     	; 0x13aa <game_end_animation+0x28>
	{
		*y = DISPLAY_HEIGHT + HIDDEN_ROWS - 1;
    1390:	83 e2       	ldi	r24, 0x23	; 35
    1392:	88 83       	st	Y, r24
		place_piece_line(*y, last_piece_placed);
    1394:	0e 94 90 09 	call	0x1320	; 0x1320 <place_piece_line>
		set_timer_period_ms(TIMER_0, GAME_END_ANI_SPEED);
    1398:	6b e4       	ldi	r22, 0x4B	; 75
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
		first_call = 0;
    13a2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <first_call.2441>


unsigned char game_end_animation(signed char * y, piece_type_t last_piece_placed)
{
	static unsigned char first_call = 1;
	unsigned char animation_finished = 0; //bool
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	15 c0       	rjmp	.+42     	; 0x13d4 <game_end_animation+0x52>
		set_timer_period_ms(TIMER_0, GAME_END_ANI_SPEED);
		first_call = 0;
	}
	else
	{
		if (*y > 0)
    13aa:	88 81       	ld	r24, Y
    13ac:	18 16       	cp	r1, r24
    13ae:	7c f4       	brge	.+30     	; 0x13ce <game_end_animation+0x4c>
		{
			clear_line((*y) - 1);
    13b0:	81 50       	subi	r24, 0x01	; 1
    13b2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <clear_line>
			move_line_up(*y);
    13b6:	88 81       	ld	r24, Y
    13b8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <move_line_up>
			set_row_redraw((*y) - 1);
    13bc:	88 81       	ld	r24, Y
    13be:	81 50       	subi	r24, 0x01	; 1
    13c0:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_row_redraw>
			--(*y);
    13c4:	88 81       	ld	r24, Y
    13c6:	81 50       	subi	r24, 0x01	; 1
    13c8:	88 83       	st	Y, r24


unsigned char game_end_animation(signed char * y, piece_type_t last_piece_placed)
{
	static unsigned char first_call = 1;
	unsigned char animation_finished = 0; //bool
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <game_end_animation+0x52>
			set_row_redraw((*y) - 1);
			--(*y);
		}
		else
		{
			first_call = 1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <first_call.2441>
			animation_finished = 1; // true
		}
	}
	return animation_finished;
}
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <clearing_row_animation>:
	for (x = 0; x < DISPLAY_WIDTH; x++)
		(*board[y_cord])[x].redraw = 1;
}

unsigned char clearing_row_animation(signed char y, unsigned char cleared_rows, unsigned long int * score)
{
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
	block_t(*temp_line)[DISPLAY_WIDTH];
	block_t empty;
	empty.fall_piece = 0;
	empty.piece_type = NO_PIECE;
	empty.redraw = 1;
	if (number_blinks_clear-- > 0)
    13e6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <number_blinks_clear.2476>
    13ea:	2f ef       	ldi	r18, 0xFF	; 255
    13ec:	29 0f       	add	r18, r25
    13ee:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <number_blinks_clear.2476>
    13f2:	99 23       	and	r25, r25
    13f4:	81 f1       	breq	.+96     	; 0x1456 <clearing_row_animation+0x7c>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 0b       	sbc	r25, r25
    13fa:	ac 01       	movw	r20, r24
    13fc:	47 5b       	subi	r20, 0xB7	; 183
    13fe:	59 4f       	sbci	r21, 0xF9	; 249
    1400:	c9 e4       	ldi	r28, 0x49	; 73
    1402:	d6 e0       	ldi	r29, 0x06	; 6
    1404:	01 e5       	ldi	r16, 0x51	; 81
    1406:	16 e0       	ldi	r17, 0x06	; 6
    1408:	81 e0       	ldi	r24, 0x01	; 1
	{
		for (j = 0, moving_mask = 0x01; j < PIECE_CONTAINER_SIZE; j++, moving_mask <<= 1)
			if (cleared_rows & moving_mask)
    140a:	96 2f       	mov	r25, r22
    140c:	98 23       	and	r25, r24
    140e:	d1 f0       	breq	.+52     	; 0x1444 <clearing_row_animation+0x6a>
    1410:	da 01       	movw	r26, r20
			{
				temp_line = board[y + j];
    1412:	2d 91       	ld	r18, X+
    1414:	3c 91       	ld	r19, X
    1416:	11 97       	sbiw	r26, 0x01	; 1
				board[y + j] = board[j];
    1418:	e8 80       	ld	r14, Y
    141a:	f9 80       	ldd	r15, Y+1	; 0x01
    141c:	11 96       	adiw	r26, 0x01	; 1
    141e:	fc 92       	st	X, r15
    1420:	ee 92       	st	-X, r14
				board[j] = temp_line;
    1422:	39 83       	std	Y+1, r19	; 0x01
    1424:	28 83       	st	Y, r18
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
				for (i = 0; i <DISPLAY_WIDTH; i++)
					(*board[y + j])[i].redraw = 1;
    142a:	ed 91       	ld	r30, X+
    142c:	fc 91       	ld	r31, X
    142e:	11 97       	sbiw	r26, 0x01	; 1
    1430:	e2 0f       	add	r30, r18
    1432:	f3 1f       	adc	r31, r19
    1434:	90 81       	ld	r25, Z
    1436:	92 60       	ori	r25, 0x02	; 2
    1438:	90 83       	st	Z, r25
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
			if (cleared_rows & moving_mask)
			{
				temp_line = board[y + j];
				board[y + j] = board[j];
				board[j] = temp_line;
				for (i = 0; i <DISPLAY_WIDTH; i++)
    143e:	28 30       	cpi	r18, 0x08	; 8
    1440:	31 05       	cpc	r19, r1
    1442:	99 f7       	brne	.-26     	; 0x142a <clearing_row_animation+0x50>
	empty.fall_piece = 0;
	empty.piece_type = NO_PIECE;
	empty.redraw = 1;
	if (number_blinks_clear-- > 0)
	{
		for (j = 0, moving_mask = 0x01; j < PIECE_CONTAINER_SIZE; j++, moving_mask <<= 1)
    1444:	88 0f       	add	r24, r24
    1446:	4e 5f       	subi	r20, 0xFE	; 254
    1448:	5f 4f       	sbci	r21, 0xFF	; 255
    144a:	22 96       	adiw	r28, 0x02	; 2
    144c:	c0 17       	cp	r28, r16
    144e:	d1 07       	cpc	r29, r17
    1450:	e1 f6       	brne	.-72     	; 0x140a <clearing_row_animation+0x30>

unsigned char clearing_row_animation(signed char y, unsigned char cleared_rows, unsigned long int * score)
{
	static unsigned char number_blinks_clear = NUM_BLINK_CLR_LINE, lines_cleared = 0;

	unsigned char i, j, moving_mask, animation_finished = 0;
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	5c c0       	rjmp	.+184    	; 0x150e <clearing_row_animation+0x134>
    1456:	a9 e4       	ldi	r26, 0x49	; 73
    1458:	b6 e0       	ldi	r27, 0x06	; 6
    145a:	c8 2f       	mov	r28, r24
    145c:	cc 0f       	add	r28, r28
    145e:	dd 0b       	sbc	r29, r29
    1460:	c7 5b       	subi	r28, 0xB7	; 183
    1462:	d9 4f       	sbci	r29, 0xF9	; 249
    1464:	01 e5       	ldi	r16, 0x51	; 81
    1466:	16 e0       	ldi	r17, 0x06	; 6
	block_t(*temp_line)[DISPLAY_WIDTH];
	block_t empty;
	empty.fall_piece = 0;
	empty.piece_type = NO_PIECE;
	empty.redraw = 1;
	if (number_blinks_clear-- > 0)
    1468:	71 e0       	ldi	r23, 0x01	; 1
			}
	}
	else
	{
		for (j = 0, moving_mask = 0x01; j < PIECE_CONTAINER_SIZE; j++, moving_mask <<= 1)
			if (cleared_rows & moving_mask)
    146a:	96 2f       	mov	r25, r22
    146c:	97 23       	and	r25, r23
    146e:	c1 f0       	breq	.+48     	; 0x14a0 <clearing_row_animation+0xc6>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
				for (i = 0; i < DISPLAY_WIDTH; i++)
				{
					(*board[j])[i] = empty;
    1474:	ed 91       	ld	r30, X+
    1476:	fc 91       	ld	r31, X
    1478:	11 97       	sbiw	r26, 0x01	; 1
    147a:	e2 0f       	add	r30, r18
    147c:	f3 1f       	adc	r31, r19
    147e:	90 81       	ld	r25, Z
    1480:	9c 71       	andi	r25, 0x1C	; 28
    1482:	92 60       	ori	r25, 0x02	; 2
    1484:	90 83       	st	Z, r25
					(*board[y + j])[i] = empty;
    1486:	e8 81       	ld	r30, Y
    1488:	f9 81       	ldd	r31, Y+1	; 0x01
    148a:	e2 0f       	add	r30, r18
    148c:	f3 1f       	adc	r31, r19
    148e:	90 81       	ld	r25, Z
    1490:	9c 71       	andi	r25, 0x1C	; 28
    1492:	92 60       	ori	r25, 0x02	; 2
    1494:	90 83       	st	Z, r25
    1496:	2f 5f       	subi	r18, 0xFF	; 255
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	else
	{
		for (j = 0, moving_mask = 0x01; j < PIECE_CONTAINER_SIZE; j++, moving_mask <<= 1)
			if (cleared_rows & moving_mask)
				for (i = 0; i < DISPLAY_WIDTH; i++)
    149a:	28 30       	cpi	r18, 0x08	; 8
    149c:	31 05       	cpc	r19, r1
    149e:	51 f7       	brne	.-44     	; 0x1474 <clearing_row_animation+0x9a>
				//(*board[j])[i].redraw = 1; // No se ve no tiene sentido redraw
			}
	}
	else
	{
		for (j = 0, moving_mask = 0x01; j < PIECE_CONTAINER_SIZE; j++, moving_mask <<= 1)
    14a0:	77 0f       	add	r23, r23
    14a2:	12 96       	adiw	r26, 0x02	; 2
    14a4:	22 96       	adiw	r28, 0x02	; 2
    14a6:	0a 17       	cp	r16, r26
    14a8:	1b 07       	cpc	r17, r27
    14aa:	f9 f6       	brne	.-66     	; 0x146a <clearing_row_animation+0x90>
    14ac:	7a 01       	movw	r14, r20
    14ae:	c6 2f       	mov	r28, r22
    14b0:	d8 2f       	mov	r29, r24
    14b2:	04 e0       	ldi	r16, 0x04	; 4
    14b4:	08 0f       	add	r16, r24
    14b6:	11 e0       	ldi	r17, 0x01	; 1
					(*board[j])[i] = empty;
					(*board[y + j])[i] = empty;
				}
		//Soy tonto y no lo pude optimizar habria que verlo pero paja anda...
		for (j = 0, moving_mask = 0x01; j < 4; j++, moving_mask <<= 1)
			if (cleared_rows & moving_mask)
    14b8:	8c 2f       	mov	r24, r28
    14ba:	81 23       	and	r24, r17
    14bc:	41 f0       	breq	.+16     	; 0x14ce <clearing_row_animation+0xf4>
			{
				move_line_to_top(y + j);
    14be:	8d 2f       	mov	r24, r29
    14c0:	0e 94 b6 08 	call	0x116c	; 0x116c <move_line_to_top>
				++lines_cleared;
    14c4:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <lines_cleared.2477>
    14c8:	8f 5f       	subi	r24, 0xFF	; 255
    14ca:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <lines_cleared.2477>
				{
					(*board[j])[i] = empty;
					(*board[y + j])[i] = empty;
				}
		//Soy tonto y no lo pude optimizar habria que verlo pero paja anda...
		for (j = 0, moving_mask = 0x01; j < 4; j++, moving_mask <<= 1)
    14ce:	11 0f       	add	r17, r17
    14d0:	df 5f       	subi	r29, 0xFF	; 255
    14d2:	d0 13       	cpse	r29, r16
    14d4:	f1 cf       	rjmp	.-30     	; 0x14b8 <clearing_row_animation+0xde>
			{
				move_line_to_top(y + j);
				++lines_cleared;
			}

		*score += score_per_line_cleared[lines_cleared];
    14d6:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <lines_cleared.2477>
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	ee 0f       	add	r30, r30
    14de:	ff 1f       	adc	r31, r31
    14e0:	e2 5d       	subi	r30, 0xD2	; 210
    14e2:	fe 4f       	sbci	r31, 0xFE	; 254
    14e4:	20 81       	ld	r18, Z
    14e6:	31 81       	ldd	r19, Z+1	; 0x01
    14e8:	f7 01       	movw	r30, r14
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	a2 81       	ldd	r26, Z+2	; 0x02
    14f0:	b3 81       	ldd	r27, Z+3	; 0x03
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	a1 1d       	adc	r26, r1
    14f8:	b1 1d       	adc	r27, r1
    14fa:	80 83       	st	Z, r24
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	a2 83       	std	Z+2, r26	; 0x02
    1500:	b3 83       	std	Z+3, r27	; 0x03
		animation_finished = 1;
		lines_cleared = 0, number_blinks_clear = NUM_BLINK_CLR_LINE;
    1502:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <lines_cleared.2477>
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <number_blinks_clear.2476>
				move_line_to_top(y + j);
				++lines_cleared;
			}

		*score += score_per_line_cleared[lines_cleared];
		animation_finished = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
		lines_cleared = 0, number_blinks_clear = NUM_BLINK_CLR_LINE;
	}
	return animation_finished;

}
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	08 95       	ret

0000151c <draw_letter_t>:
{
	block_t piece_block;
	piece_block.fall_piece = 0;
	piece_block.redraw = 1;
	piece_block.piece_type = (unsigned int)piece;
	(*board[y])[x] = piece_block;
    151c:	06 2e       	mov	r0, r22
    151e:	00 0c       	add	r0, r0
    1520:	77 0b       	sbc	r23, r23
    1522:	fb 01       	movw	r30, r22
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	e7 5b       	subi	r30, 0xB7	; 183
    152a:	f9 4f       	sbci	r31, 0xF9	; 249
    152c:	a0 81       	ld	r26, Z
    152e:	b1 81       	ldd	r27, Z+1	; 0x01
    1530:	04 2e       	mov	r0, r20
    1532:	00 0c       	add	r0, r0
    1534:	55 0b       	sbc	r21, r21
    1536:	a4 0f       	add	r26, r20
    1538:	b5 1f       	adc	r27, r21
    153a:	9c 91       	ld	r25, X
    153c:	9c 71       	andi	r25, 0x1C	; 28
    153e:	82 95       	swap	r24
    1540:	88 0f       	add	r24, r24
    1542:	80 7e       	andi	r24, 0xE0	; 224
    1544:	92 60       	ori	r25, 0x02	; 2
    1546:	98 2b       	or	r25, r24
    1548:	9c 93       	st	X, r25
	(*board[y])[x + 1] = piece_block;
    154a:	a0 81       	ld	r26, Z
    154c:	b1 81       	ldd	r27, Z+1	; 0x01
    154e:	9a 01       	movw	r18, r20
    1550:	2f 5f       	subi	r18, 0xFF	; 255
    1552:	3f 4f       	sbci	r19, 0xFF	; 255
    1554:	a2 0f       	add	r26, r18
    1556:	b3 1f       	adc	r27, r19
    1558:	9c 91       	ld	r25, X
    155a:	9c 71       	andi	r25, 0x1C	; 28
    155c:	92 60       	ori	r25, 0x02	; 2
    155e:	98 2b       	or	r25, r24
    1560:	9c 93       	st	X, r25
	(*board[y])[x + 2] = piece_block;
    1562:	a0 81       	ld	r26, Z
    1564:	b1 81       	ldd	r27, Z+1	; 0x01
    1566:	4e 5f       	subi	r20, 0xFE	; 254
    1568:	5f 4f       	sbci	r21, 0xFF	; 255
    156a:	a4 0f       	add	r26, r20
    156c:	b5 1f       	adc	r27, r21
    156e:	9c 91       	ld	r25, X
    1570:	9c 71       	andi	r25, 0x1C	; 28
    1572:	92 60       	ori	r25, 0x02	; 2
    1574:	98 2b       	or	r25, r24
    1576:	9c 93       	st	X, r25
	(*board[y + 1])[x + 1] = piece_block;
    1578:	fb 01       	movw	r30, r22
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	e5 5b       	subi	r30, 0xB5	; 181
    1580:	f9 4f       	sbci	r31, 0xF9	; 249
    1582:	01 90       	ld	r0, Z+
    1584:	f0 81       	ld	r31, Z
    1586:	e0 2d       	mov	r30, r0
    1588:	e2 0f       	add	r30, r18
    158a:	f3 1f       	adc	r31, r19
    158c:	90 81       	ld	r25, Z
    158e:	9c 71       	andi	r25, 0x1C	; 28
    1590:	92 60       	ori	r25, 0x02	; 2
    1592:	98 2b       	or	r25, r24
    1594:	90 83       	st	Z, r25
	(*board[y + 2])[x + 1] = piece_block;
    1596:	fb 01       	movw	r30, r22
    1598:	ee 0f       	add	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	e3 5b       	subi	r30, 0xB3	; 179
    159e:	f9 4f       	sbci	r31, 0xF9	; 249
    15a0:	01 90       	ld	r0, Z+
    15a2:	f0 81       	ld	r31, Z
    15a4:	e0 2d       	mov	r30, r0
    15a6:	e2 0f       	add	r30, r18
    15a8:	f3 1f       	adc	r31, r19
    15aa:	90 81       	ld	r25, Z
    15ac:	9c 71       	andi	r25, 0x1C	; 28
    15ae:	92 60       	ori	r25, 0x02	; 2
    15b0:	98 2b       	or	r25, r24
    15b2:	90 83       	st	Z, r25
	(*board[y + 3])[x + 1] = piece_block;
    15b4:	fb 01       	movw	r30, r22
    15b6:	ee 0f       	add	r30, r30
    15b8:	ff 1f       	adc	r31, r31
    15ba:	e1 5b       	subi	r30, 0xB1	; 177
    15bc:	f9 4f       	sbci	r31, 0xF9	; 249
    15be:	01 90       	ld	r0, Z+
    15c0:	f0 81       	ld	r31, Z
    15c2:	e0 2d       	mov	r30, r0
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	90 81       	ld	r25, Z
    15ca:	9c 71       	andi	r25, 0x1C	; 28
    15cc:	92 60       	ori	r25, 0x02	; 2
    15ce:	98 2b       	or	r25, r24
    15d0:	90 83       	st	Z, r25
	(*board[y + 4])[x + 1] = piece_block;
    15d2:	66 0f       	add	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	fb 01       	movw	r30, r22
    15d8:	ef 5a       	subi	r30, 0xAF	; 175
    15da:	f9 4f       	sbci	r31, 0xF9	; 249
    15dc:	01 90       	ld	r0, Z+
    15de:	f0 81       	ld	r31, Z
    15e0:	e0 2d       	mov	r30, r0
    15e2:	e2 0f       	add	r30, r18
    15e4:	f3 1f       	adc	r31, r19
    15e6:	90 81       	ld	r25, Z
    15e8:	9c 71       	andi	r25, 0x1C	; 28
    15ea:	92 60       	ori	r25, 0x02	; 2
    15ec:	89 2b       	or	r24, r25
    15ee:	80 83       	st	Z, r24
    15f0:	08 95       	ret

000015f2 <draw_letter_e>:

}

void draw_letter_e(piece_type_t piece, signed char y, signed char x)
{
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
	block_t piece_block;
	piece_block.fall_piece = 0;
	piece_block.redraw = 1;
	piece_block.piece_type = piece;

	(*board[y])[x] = piece_block;
    15f6:	06 2e       	mov	r0, r22
    15f8:	00 0c       	add	r0, r0
    15fa:	77 0b       	sbc	r23, r23
    15fc:	fb 01       	movw	r30, r22
    15fe:	ee 0f       	add	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	e7 5b       	subi	r30, 0xB7	; 183
    1604:	f9 4f       	sbci	r31, 0xF9	; 249
    1606:	a0 81       	ld	r26, Z
    1608:	b1 81       	ldd	r27, Z+1	; 0x01
    160a:	04 2e       	mov	r0, r20
    160c:	00 0c       	add	r0, r0
    160e:	55 0b       	sbc	r21, r21
    1610:	a4 0f       	add	r26, r20
    1612:	b5 1f       	adc	r27, r21
    1614:	9c 91       	ld	r25, X
    1616:	9c 71       	andi	r25, 0x1C	; 28
    1618:	82 95       	swap	r24
    161a:	88 0f       	add	r24, r24
    161c:	80 7e       	andi	r24, 0xE0	; 224
    161e:	92 60       	ori	r25, 0x02	; 2
    1620:	98 2b       	or	r25, r24
    1622:	9c 93       	st	X, r25
	(*board[y])[x + 1] = piece_block;
    1624:	a0 81       	ld	r26, Z
    1626:	b1 81       	ldd	r27, Z+1	; 0x01
    1628:	ea 01       	movw	r28, r20
    162a:	21 96       	adiw	r28, 0x01	; 1
    162c:	ac 0f       	add	r26, r28
    162e:	bd 1f       	adc	r27, r29
    1630:	9c 91       	ld	r25, X
    1632:	9c 71       	andi	r25, 0x1C	; 28
    1634:	92 60       	ori	r25, 0x02	; 2
    1636:	98 2b       	or	r25, r24
    1638:	9c 93       	st	X, r25
	(*board[y])[x + 2] = piece_block;
    163a:	01 90       	ld	r0, Z+
    163c:	f0 81       	ld	r31, Z
    163e:	e0 2d       	mov	r30, r0
    1640:	9a 01       	movw	r18, r20
    1642:	2e 5f       	subi	r18, 0xFE	; 254
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	e2 0f       	add	r30, r18
    1648:	f3 1f       	adc	r31, r19
    164a:	90 81       	ld	r25, Z
    164c:	9c 71       	andi	r25, 0x1C	; 28
    164e:	92 60       	ori	r25, 0x02	; 2
    1650:	98 2b       	or	r25, r24
    1652:	90 83       	st	Z, r25

	(*board[y + 1])[x] = piece_block;
    1654:	fb 01       	movw	r30, r22
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	e5 5b       	subi	r30, 0xB5	; 181
    165c:	f9 4f       	sbci	r31, 0xF9	; 249
    165e:	01 90       	ld	r0, Z+
    1660:	f0 81       	ld	r31, Z
    1662:	e0 2d       	mov	r30, r0
    1664:	e4 0f       	add	r30, r20
    1666:	f5 1f       	adc	r31, r21
    1668:	90 81       	ld	r25, Z
    166a:	9c 71       	andi	r25, 0x1C	; 28
    166c:	92 60       	ori	r25, 0x02	; 2
    166e:	98 2b       	or	r25, r24
    1670:	90 83       	st	Z, r25
	(*board[y + 2])[x] = piece_block;
    1672:	fb 01       	movw	r30, r22
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	e3 5b       	subi	r30, 0xB3	; 179
    167a:	f9 4f       	sbci	r31, 0xF9	; 249
    167c:	a0 81       	ld	r26, Z
    167e:	b1 81       	ldd	r27, Z+1	; 0x01
    1680:	a4 0f       	add	r26, r20
    1682:	b5 1f       	adc	r27, r21
    1684:	9c 91       	ld	r25, X
    1686:	9c 71       	andi	r25, 0x1C	; 28
    1688:	92 60       	ori	r25, 0x02	; 2
    168a:	98 2b       	or	r25, r24
    168c:	9c 93       	st	X, r25
	(*board[y + 2])[x + 1] = piece_block;
    168e:	a0 81       	ld	r26, Z
    1690:	b1 81       	ldd	r27, Z+1	; 0x01
    1692:	ac 0f       	add	r26, r28
    1694:	bd 1f       	adc	r27, r29
    1696:	9c 91       	ld	r25, X
    1698:	9c 71       	andi	r25, 0x1C	; 28
    169a:	92 60       	ori	r25, 0x02	; 2
    169c:	98 2b       	or	r25, r24
    169e:	9c 93       	st	X, r25
	(*board[y + 2])[x + 2] = piece_block;
    16a0:	01 90       	ld	r0, Z+
    16a2:	f0 81       	ld	r31, Z
    16a4:	e0 2d       	mov	r30, r0
    16a6:	e2 0f       	add	r30, r18
    16a8:	f3 1f       	adc	r31, r19
    16aa:	90 81       	ld	r25, Z
    16ac:	9c 71       	andi	r25, 0x1C	; 28
    16ae:	92 60       	ori	r25, 0x02	; 2
    16b0:	98 2b       	or	r25, r24
    16b2:	90 83       	st	Z, r25

	(*board[y + 3])[x] = piece_block;
    16b4:	fb 01       	movw	r30, r22
    16b6:	ee 0f       	add	r30, r30
    16b8:	ff 1f       	adc	r31, r31
    16ba:	e1 5b       	subi	r30, 0xB1	; 177
    16bc:	f9 4f       	sbci	r31, 0xF9	; 249
    16be:	01 90       	ld	r0, Z+
    16c0:	f0 81       	ld	r31, Z
    16c2:	e0 2d       	mov	r30, r0
    16c4:	e4 0f       	add	r30, r20
    16c6:	f5 1f       	adc	r31, r21
    16c8:	90 81       	ld	r25, Z
    16ca:	9c 71       	andi	r25, 0x1C	; 28
    16cc:	92 60       	ori	r25, 0x02	; 2
    16ce:	98 2b       	or	r25, r24
    16d0:	90 83       	st	Z, r25
	(*board[y + 4])[x] = piece_block;
    16d2:	66 0f       	add	r22, r22
    16d4:	77 1f       	adc	r23, r23
    16d6:	db 01       	movw	r26, r22
    16d8:	af 5a       	subi	r26, 0xAF	; 175
    16da:	b9 4f       	sbci	r27, 0xF9	; 249
    16dc:	ed 91       	ld	r30, X+
    16de:	fc 91       	ld	r31, X
    16e0:	11 97       	sbiw	r26, 0x01	; 1
    16e2:	e4 0f       	add	r30, r20
    16e4:	f5 1f       	adc	r31, r21
    16e6:	90 81       	ld	r25, Z
    16e8:	9c 71       	andi	r25, 0x1C	; 28
    16ea:	92 60       	ori	r25, 0x02	; 2
    16ec:	98 2b       	or	r25, r24
    16ee:	90 83       	st	Z, r25
	(*board[y + 4])[x + 1] = piece_block;
    16f0:	4d 91       	ld	r20, X+
    16f2:	5c 91       	ld	r21, X
    16f4:	11 97       	sbiw	r26, 0x01	; 1
    16f6:	c4 0f       	add	r28, r20
    16f8:	d5 1f       	adc	r29, r21
    16fa:	98 81       	ld	r25, Y
    16fc:	9c 71       	andi	r25, 0x1C	; 28
    16fe:	92 60       	ori	r25, 0x02	; 2
    1700:	98 2b       	or	r25, r24
    1702:	98 83       	st	Y, r25
	(*board[y + 4])[x + 2] = piece_block;
    1704:	ed 91       	ld	r30, X+
    1706:	fc 91       	ld	r31, X
    1708:	e2 0f       	add	r30, r18
    170a:	f3 1f       	adc	r31, r19
    170c:	90 81       	ld	r25, Z
    170e:	9c 71       	andi	r25, 0x1C	; 28
    1710:	92 60       	ori	r25, 0x02	; 2
    1712:	89 2b       	or	r24, r25
    1714:	80 83       	st	Z, r24
}
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <draw_letter_r>:

void draw_letter_r(piece_type_t piece, signed char y, signed char x)
{
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
	block_t piece_block;
	piece_block.fall_piece = 0;
	piece_block.redraw = 1;
	piece_block.piece_type = piece;
	(*board[y])[x] = piece_block;
    1728:	06 2e       	mov	r0, r22
    172a:	00 0c       	add	r0, r0
    172c:	77 0b       	sbc	r23, r23
    172e:	db 01       	movw	r26, r22
    1730:	aa 0f       	add	r26, r26
    1732:	bb 1f       	adc	r27, r27
    1734:	a7 5b       	subi	r26, 0xB7	; 183
    1736:	b9 4f       	sbci	r27, 0xF9	; 249
    1738:	ed 91       	ld	r30, X+
    173a:	fc 91       	ld	r31, X
    173c:	11 97       	sbiw	r26, 0x01	; 1
    173e:	04 2e       	mov	r0, r20
    1740:	00 0c       	add	r0, r0
    1742:	55 0b       	sbc	r21, r21
    1744:	e4 0f       	add	r30, r20
    1746:	f5 1f       	adc	r31, r21
    1748:	90 81       	ld	r25, Z
    174a:	9c 71       	andi	r25, 0x1C	; 28
    174c:	82 95       	swap	r24
    174e:	88 0f       	add	r24, r24
    1750:	80 7e       	andi	r24, 0xE0	; 224
    1752:	92 60       	ori	r25, 0x02	; 2
    1754:	98 2b       	or	r25, r24
    1756:	90 83       	st	Z, r25
	(*board[y])[x + 1] = piece_block;
    1758:	cd 91       	ld	r28, X+
    175a:	dc 91       	ld	r29, X
    175c:	11 97       	sbiw	r26, 0x01	; 1
    175e:	fa 01       	movw	r30, r20
    1760:	31 96       	adiw	r30, 0x01	; 1
    1762:	ce 0f       	add	r28, r30
    1764:	df 1f       	adc	r29, r31
    1766:	98 81       	ld	r25, Y
    1768:	9c 71       	andi	r25, 0x1C	; 28
    176a:	92 60       	ori	r25, 0x02	; 2
    176c:	98 2b       	or	r25, r24
    176e:	98 83       	st	Y, r25
	(*board[y])[x + 2] = piece_block;
    1770:	0d 90       	ld	r0, X+
    1772:	bc 91       	ld	r27, X
    1774:	a0 2d       	mov	r26, r0
    1776:	ea 01       	movw	r28, r20
    1778:	22 96       	adiw	r28, 0x02	; 2
    177a:	ac 0f       	add	r26, r28
    177c:	bd 1f       	adc	r27, r29
    177e:	9c 91       	ld	r25, X
    1780:	9c 71       	andi	r25, 0x1C	; 28
    1782:	92 60       	ori	r25, 0x02	; 2
    1784:	98 2b       	or	r25, r24
    1786:	9c 93       	st	X, r25

	(*board[y + 1])[x + 2] = piece_block;
    1788:	8b 01       	movw	r16, r22
    178a:	00 0f       	add	r16, r16
    178c:	11 1f       	adc	r17, r17
    178e:	05 5b       	subi	r16, 0xB5	; 181
    1790:	19 4f       	sbci	r17, 0xF9	; 249
    1792:	d8 01       	movw	r26, r16
    1794:	2d 91       	ld	r18, X+
    1796:	3c 91       	ld	r19, X
    1798:	d9 01       	movw	r26, r18
    179a:	ac 0f       	add	r26, r28
    179c:	bd 1f       	adc	r27, r29
    179e:	9c 91       	ld	r25, X
    17a0:	9c 71       	andi	r25, 0x1C	; 28
    17a2:	92 60       	ori	r25, 0x02	; 2
    17a4:	98 2b       	or	r25, r24
    17a6:	9c 93       	st	X, r25
	(*board[y + 2])[x + 2] = piece_block;
    17a8:	9b 01       	movw	r18, r22
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	23 5b       	subi	r18, 0xB3	; 179
    17b0:	39 4f       	sbci	r19, 0xF9	; 249
    17b2:	d9 01       	movw	r26, r18
    17b4:	ed 90       	ld	r14, X+
    17b6:	fc 90       	ld	r15, X
    17b8:	d7 01       	movw	r26, r14
    17ba:	ac 0f       	add	r26, r28
    17bc:	bd 1f       	adc	r27, r29
    17be:	9c 91       	ld	r25, X
    17c0:	9c 71       	andi	r25, 0x1C	; 28
    17c2:	92 60       	ori	r25, 0x02	; 2
    17c4:	98 2b       	or	r25, r24
    17c6:	9c 93       	st	X, r25
	(*board[y + 2])[x + 1] = piece_block;
    17c8:	d9 01       	movw	r26, r18
    17ca:	ed 90       	ld	r14, X+
    17cc:	fc 90       	ld	r15, X
    17ce:	d7 01       	movw	r26, r14
    17d0:	ae 0f       	add	r26, r30
    17d2:	bf 1f       	adc	r27, r31
    17d4:	9c 91       	ld	r25, X
    17d6:	9c 71       	andi	r25, 0x1C	; 28
    17d8:	92 60       	ori	r25, 0x02	; 2
    17da:	98 2b       	or	r25, r24
    17dc:	9c 93       	st	X, r25
	(*board[y + 3])[x + 1] = piece_block;
    17de:	db 01       	movw	r26, r22
    17e0:	aa 0f       	add	r26, r26
    17e2:	bb 1f       	adc	r27, r27
    17e4:	a1 5b       	subi	r26, 0xB1	; 177
    17e6:	b9 4f       	sbci	r27, 0xF9	; 249
    17e8:	ed 90       	ld	r14, X+
    17ea:	fc 90       	ld	r15, X
    17ec:	11 97       	sbiw	r26, 0x01	; 1
    17ee:	ee 0d       	add	r30, r14
    17f0:	ff 1d       	adc	r31, r15
    17f2:	90 81       	ld	r25, Z
    17f4:	9c 71       	andi	r25, 0x1C	; 28
    17f6:	92 60       	ori	r25, 0x02	; 2
    17f8:	98 2b       	or	r25, r24
    17fa:	90 83       	st	Z, r25
	(*board[y + 4])[x + 2] = piece_block;
    17fc:	66 0f       	add	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	fb 01       	movw	r30, r22
    1802:	ef 5a       	subi	r30, 0xAF	; 175
    1804:	f9 4f       	sbci	r31, 0xF9	; 249
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	c6 0f       	add	r28, r22
    180c:	d7 1f       	adc	r29, r23
    180e:	98 81       	ld	r25, Y
    1810:	9c 71       	andi	r25, 0x1C	; 28
    1812:	92 60       	ori	r25, 0x02	; 2
    1814:	98 2b       	or	r25, r24
    1816:	98 83       	st	Y, r25

	(*board[y + 1])[x] = piece_block;
    1818:	e8 01       	movw	r28, r16
    181a:	68 81       	ld	r22, Y
    181c:	79 81       	ldd	r23, Y+1	; 0x01
    181e:	eb 01       	movw	r28, r22
    1820:	c4 0f       	add	r28, r20
    1822:	d5 1f       	adc	r29, r21
    1824:	98 81       	ld	r25, Y
    1826:	9c 71       	andi	r25, 0x1C	; 28
    1828:	92 60       	ori	r25, 0x02	; 2
    182a:	98 2b       	or	r25, r24
    182c:	98 83       	st	Y, r25
	(*board[y + 2])[x] = piece_block;
    182e:	e9 01       	movw	r28, r18
    1830:	28 81       	ld	r18, Y
    1832:	39 81       	ldd	r19, Y+1	; 0x01
    1834:	e9 01       	movw	r28, r18
    1836:	c4 0f       	add	r28, r20
    1838:	d5 1f       	adc	r29, r21
    183a:	98 81       	ld	r25, Y
    183c:	9c 71       	andi	r25, 0x1C	; 28
    183e:	92 60       	ori	r25, 0x02	; 2
    1840:	98 2b       	or	r25, r24
    1842:	98 83       	st	Y, r25
	(*board[y + 3])[x] = piece_block;
    1844:	0d 90       	ld	r0, X+
    1846:	bc 91       	ld	r27, X
    1848:	a0 2d       	mov	r26, r0
    184a:	a4 0f       	add	r26, r20
    184c:	b5 1f       	adc	r27, r21
    184e:	9c 91       	ld	r25, X
    1850:	9c 71       	andi	r25, 0x1C	; 28
    1852:	92 60       	ori	r25, 0x02	; 2
    1854:	98 2b       	or	r25, r24
    1856:	9c 93       	st	X, r25
	(*board[y + 4])[x] = piece_block;
    1858:	01 90       	ld	r0, Z+
    185a:	f0 81       	ld	r31, Z
    185c:	e0 2d       	mov	r30, r0
    185e:	e4 0f       	add	r30, r20
    1860:	f5 1f       	adc	r31, r21
    1862:	90 81       	ld	r25, Z
    1864:	9c 71       	andi	r25, 0x1C	; 28
    1866:	92 60       	ori	r25, 0x02	; 2
    1868:	89 2b       	or	r24, r25
    186a:	80 83       	st	Z, r24


}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	08 95       	ret

0000187a <draw_letter_i>:

void draw_letter_i(piece_type_t piece, signed char y, signed char x)
{
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
	block_t piece_block;
	piece_block.fall_piece = 0;
	piece_block.redraw = 1;
	piece_block.piece_type = piece;
	(*board[y])[x] = piece_block;
    187e:	06 2e       	mov	r0, r22
    1880:	00 0c       	add	r0, r0
    1882:	77 0b       	sbc	r23, r23
    1884:	fb 01       	movw	r30, r22
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	e7 5b       	subi	r30, 0xB7	; 183
    188c:	f9 4f       	sbci	r31, 0xF9	; 249
    188e:	a0 81       	ld	r26, Z
    1890:	b1 81       	ldd	r27, Z+1	; 0x01
    1892:	04 2e       	mov	r0, r20
    1894:	00 0c       	add	r0, r0
    1896:	55 0b       	sbc	r21, r21
    1898:	a4 0f       	add	r26, r20
    189a:	b5 1f       	adc	r27, r21
    189c:	9c 91       	ld	r25, X
    189e:	9c 71       	andi	r25, 0x1C	; 28
    18a0:	82 95       	swap	r24
    18a2:	88 0f       	add	r24, r24
    18a4:	80 7e       	andi	r24, 0xE0	; 224
    18a6:	92 60       	ori	r25, 0x02	; 2
    18a8:	98 2b       	or	r25, r24
    18aa:	9c 93       	st	X, r25
	(*board[y])[x + 1] = piece_block;
    18ac:	c0 81       	ld	r28, Z
    18ae:	d1 81       	ldd	r29, Z+1	; 0x01
    18b0:	da 01       	movw	r26, r20
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	ca 0f       	add	r28, r26
    18b6:	db 1f       	adc	r29, r27
    18b8:	98 81       	ld	r25, Y
    18ba:	9c 71       	andi	r25, 0x1C	; 28
    18bc:	92 60       	ori	r25, 0x02	; 2
    18be:	98 2b       	or	r25, r24
    18c0:	98 83       	st	Y, r25
	(*board[y])[x + 2] = piece_block;
    18c2:	01 90       	ld	r0, Z+
    18c4:	f0 81       	ld	r31, Z
    18c6:	e0 2d       	mov	r30, r0
    18c8:	9a 01       	movw	r18, r20
    18ca:	2e 5f       	subi	r18, 0xFE	; 254
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	e2 0f       	add	r30, r18
    18d0:	f3 1f       	adc	r31, r19
    18d2:	90 81       	ld	r25, Z
    18d4:	9c 71       	andi	r25, 0x1C	; 28
    18d6:	92 60       	ori	r25, 0x02	; 2
    18d8:	98 2b       	or	r25, r24
    18da:	90 83       	st	Z, r25

	(*board[y + 1])[x + 1] = piece_block;
    18dc:	fb 01       	movw	r30, r22
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	e5 5b       	subi	r30, 0xB5	; 181
    18e4:	f9 4f       	sbci	r31, 0xF9	; 249
    18e6:	01 90       	ld	r0, Z+
    18e8:	f0 81       	ld	r31, Z
    18ea:	e0 2d       	mov	r30, r0
    18ec:	ea 0f       	add	r30, r26
    18ee:	fb 1f       	adc	r31, r27
    18f0:	90 81       	ld	r25, Z
    18f2:	9c 71       	andi	r25, 0x1C	; 28
    18f4:	92 60       	ori	r25, 0x02	; 2
    18f6:	98 2b       	or	r25, r24
    18f8:	90 83       	st	Z, r25
	(*board[y + 2])[x + 1] = piece_block;
    18fa:	fb 01       	movw	r30, r22
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	e3 5b       	subi	r30, 0xB3	; 179
    1902:	f9 4f       	sbci	r31, 0xF9	; 249
    1904:	01 90       	ld	r0, Z+
    1906:	f0 81       	ld	r31, Z
    1908:	e0 2d       	mov	r30, r0
    190a:	ea 0f       	add	r30, r26
    190c:	fb 1f       	adc	r31, r27
    190e:	90 81       	ld	r25, Z
    1910:	9c 71       	andi	r25, 0x1C	; 28
    1912:	92 60       	ori	r25, 0x02	; 2
    1914:	98 2b       	or	r25, r24
    1916:	90 83       	st	Z, r25
	(*board[y + 3])[x + 1] = piece_block;
    1918:	fb 01       	movw	r30, r22
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	e1 5b       	subi	r30, 0xB1	; 177
    1920:	f9 4f       	sbci	r31, 0xF9	; 249
    1922:	01 90       	ld	r0, Z+
    1924:	f0 81       	ld	r31, Z
    1926:	e0 2d       	mov	r30, r0
    1928:	ea 0f       	add	r30, r26
    192a:	fb 1f       	adc	r31, r27
    192c:	90 81       	ld	r25, Z
    192e:	9c 71       	andi	r25, 0x1C	; 28
    1930:	92 60       	ori	r25, 0x02	; 2
    1932:	98 2b       	or	r25, r24
    1934:	90 83       	st	Z, r25

	(*board[y + 4])[x] = piece_block;
    1936:	66 0f       	add	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	fb 01       	movw	r30, r22
    193c:	ef 5a       	subi	r30, 0xAF	; 175
    193e:	f9 4f       	sbci	r31, 0xF9	; 249
    1940:	c0 81       	ld	r28, Z
    1942:	d1 81       	ldd	r29, Z+1	; 0x01
    1944:	c4 0f       	add	r28, r20
    1946:	d5 1f       	adc	r29, r21
    1948:	98 81       	ld	r25, Y
    194a:	9c 71       	andi	r25, 0x1C	; 28
    194c:	92 60       	ori	r25, 0x02	; 2
    194e:	98 2b       	or	r25, r24
    1950:	98 83       	st	Y, r25
	(*board[y + 4])[x + 1] = piece_block;
    1952:	40 81       	ld	r20, Z
    1954:	51 81       	ldd	r21, Z+1	; 0x01
    1956:	a4 0f       	add	r26, r20
    1958:	b5 1f       	adc	r27, r21
    195a:	9c 91       	ld	r25, X
    195c:	9c 71       	andi	r25, 0x1C	; 28
    195e:	92 60       	ori	r25, 0x02	; 2
    1960:	98 2b       	or	r25, r24
    1962:	9c 93       	st	X, r25
	(*board[y + 4])[x + 2] = piece_block;
    1964:	01 90       	ld	r0, Z+
    1966:	f0 81       	ld	r31, Z
    1968:	e0 2d       	mov	r30, r0
    196a:	e2 0f       	add	r30, r18
    196c:	f3 1f       	adc	r31, r19
    196e:	90 81       	ld	r25, Z
    1970:	9c 71       	andi	r25, 0x1C	; 28
    1972:	92 60       	ori	r25, 0x02	; 2
    1974:	89 2b       	or	r24, r25
    1976:	80 83       	st	Z, r24
}
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <draw_letter_s>:

void draw_letter_s(piece_type_t piece, signed char y, signed char x)
{
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
	block_t piece_block;
	piece_block.fall_piece = 0;
	piece_block.redraw = 1;
	piece_block.piece_type = piece;
	(*board[y])[x] = piece_block;
    1982:	06 2e       	mov	r0, r22
    1984:	00 0c       	add	r0, r0
    1986:	77 0b       	sbc	r23, r23
    1988:	fb 01       	movw	r30, r22
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	e7 5b       	subi	r30, 0xB7	; 183
    1990:	f9 4f       	sbci	r31, 0xF9	; 249
    1992:	a0 81       	ld	r26, Z
    1994:	b1 81       	ldd	r27, Z+1	; 0x01
    1996:	04 2e       	mov	r0, r20
    1998:	00 0c       	add	r0, r0
    199a:	55 0b       	sbc	r21, r21
    199c:	a4 0f       	add	r26, r20
    199e:	b5 1f       	adc	r27, r21
    19a0:	9c 91       	ld	r25, X
    19a2:	9c 71       	andi	r25, 0x1C	; 28
    19a4:	82 95       	swap	r24
    19a6:	88 0f       	add	r24, r24
    19a8:	80 7e       	andi	r24, 0xE0	; 224
    19aa:	92 60       	ori	r25, 0x02	; 2
    19ac:	98 2b       	or	r25, r24
    19ae:	9c 93       	st	X, r25
	(*board[y])[x + 1] = piece_block;
    19b0:	a0 81       	ld	r26, Z
    19b2:	b1 81       	ldd	r27, Z+1	; 0x01
    19b4:	ea 01       	movw	r28, r20
    19b6:	21 96       	adiw	r28, 0x01	; 1
    19b8:	ac 0f       	add	r26, r28
    19ba:	bd 1f       	adc	r27, r29
    19bc:	9c 91       	ld	r25, X
    19be:	9c 71       	andi	r25, 0x1C	; 28
    19c0:	92 60       	ori	r25, 0x02	; 2
    19c2:	98 2b       	or	r25, r24
    19c4:	9c 93       	st	X, r25
	(*board[y])[x + 2] = piece_block;
    19c6:	01 90       	ld	r0, Z+
    19c8:	f0 81       	ld	r31, Z
    19ca:	e0 2d       	mov	r30, r0
    19cc:	9a 01       	movw	r18, r20
    19ce:	2e 5f       	subi	r18, 0xFE	; 254
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	e2 0f       	add	r30, r18
    19d4:	f3 1f       	adc	r31, r19
    19d6:	90 81       	ld	r25, Z
    19d8:	9c 71       	andi	r25, 0x1C	; 28
    19da:	92 60       	ori	r25, 0x02	; 2
    19dc:	98 2b       	or	r25, r24
    19de:	90 83       	st	Z, r25

	(*board[y + 1])[x] = piece_block;
    19e0:	fb 01       	movw	r30, r22
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	e5 5b       	subi	r30, 0xB5	; 181
    19e8:	f9 4f       	sbci	r31, 0xF9	; 249
    19ea:	01 90       	ld	r0, Z+
    19ec:	f0 81       	ld	r31, Z
    19ee:	e0 2d       	mov	r30, r0
    19f0:	e4 0f       	add	r30, r20
    19f2:	f5 1f       	adc	r31, r21
    19f4:	90 81       	ld	r25, Z
    19f6:	9c 71       	andi	r25, 0x1C	; 28
    19f8:	92 60       	ori	r25, 0x02	; 2
    19fa:	98 2b       	or	r25, r24
    19fc:	90 83       	st	Z, r25
	(*board[y + 2])[x] = piece_block;
    19fe:	fb 01       	movw	r30, r22
    1a00:	ee 0f       	add	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	e3 5b       	subi	r30, 0xB3	; 179
    1a06:	f9 4f       	sbci	r31, 0xF9	; 249
    1a08:	a0 81       	ld	r26, Z
    1a0a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a0c:	a4 0f       	add	r26, r20
    1a0e:	b5 1f       	adc	r27, r21
    1a10:	9c 91       	ld	r25, X
    1a12:	9c 71       	andi	r25, 0x1C	; 28
    1a14:	92 60       	ori	r25, 0x02	; 2
    1a16:	98 2b       	or	r25, r24
    1a18:	9c 93       	st	X, r25
	(*board[y + 2])[x + 1] = piece_block;
    1a1a:	a0 81       	ld	r26, Z
    1a1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1a1e:	ac 0f       	add	r26, r28
    1a20:	bd 1f       	adc	r27, r29
    1a22:	9c 91       	ld	r25, X
    1a24:	9c 71       	andi	r25, 0x1C	; 28
    1a26:	92 60       	ori	r25, 0x02	; 2
    1a28:	98 2b       	or	r25, r24
    1a2a:	9c 93       	st	X, r25
	(*board[y + 2])[x + 2] = piece_block;
    1a2c:	01 90       	ld	r0, Z+
    1a2e:	f0 81       	ld	r31, Z
    1a30:	e0 2d       	mov	r30, r0
    1a32:	e2 0f       	add	r30, r18
    1a34:	f3 1f       	adc	r31, r19
    1a36:	90 81       	ld	r25, Z
    1a38:	9c 71       	andi	r25, 0x1C	; 28
    1a3a:	92 60       	ori	r25, 0x02	; 2
    1a3c:	98 2b       	or	r25, r24
    1a3e:	90 83       	st	Z, r25

	(*board[y + 3])[x + 2] = piece_block;
    1a40:	fb 01       	movw	r30, r22
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	e1 5b       	subi	r30, 0xB1	; 177
    1a48:	f9 4f       	sbci	r31, 0xF9	; 249
    1a4a:	01 90       	ld	r0, Z+
    1a4c:	f0 81       	ld	r31, Z
    1a4e:	e0 2d       	mov	r30, r0
    1a50:	e2 0f       	add	r30, r18
    1a52:	f3 1f       	adc	r31, r19
    1a54:	90 81       	ld	r25, Z
    1a56:	9c 71       	andi	r25, 0x1C	; 28
    1a58:	92 60       	ori	r25, 0x02	; 2
    1a5a:	98 2b       	or	r25, r24
    1a5c:	90 83       	st	Z, r25
	(*board[y + 4])[x] = piece_block;
    1a5e:	66 0f       	add	r22, r22
    1a60:	77 1f       	adc	r23, r23
    1a62:	db 01       	movw	r26, r22
    1a64:	af 5a       	subi	r26, 0xAF	; 175
    1a66:	b9 4f       	sbci	r27, 0xF9	; 249
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	e4 0f       	add	r30, r20
    1a70:	f5 1f       	adc	r31, r21
    1a72:	90 81       	ld	r25, Z
    1a74:	9c 71       	andi	r25, 0x1C	; 28
    1a76:	92 60       	ori	r25, 0x02	; 2
    1a78:	98 2b       	or	r25, r24
    1a7a:	90 83       	st	Z, r25
	(*board[y + 4])[x + 1] = piece_block;
    1a7c:	4d 91       	ld	r20, X+
    1a7e:	5c 91       	ld	r21, X
    1a80:	11 97       	sbiw	r26, 0x01	; 1
    1a82:	c4 0f       	add	r28, r20
    1a84:	d5 1f       	adc	r29, r21
    1a86:	98 81       	ld	r25, Y
    1a88:	9c 71       	andi	r25, 0x1C	; 28
    1a8a:	92 60       	ori	r25, 0x02	; 2
    1a8c:	98 2b       	or	r25, r24
    1a8e:	98 83       	st	Y, r25
	(*board[y + 4])[x + 2] = piece_block;
    1a90:	ed 91       	ld	r30, X+
    1a92:	fc 91       	ld	r31, X
    1a94:	e2 0f       	add	r30, r18
    1a96:	f3 1f       	adc	r31, r19
    1a98:	90 81       	ld	r25, Z
    1a9a:	9c 71       	andi	r25, 0x1C	; 28
    1a9c:	92 60       	ori	r25, 0x02	; 2
    1a9e:	89 2b       	or	r24, r25
    1aa0:	80 83       	st	Z, r24
}
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <main>:
void draw_letter_i(piece_type_t piece, signed char y, signed char x);
void draw_letter_s(piece_type_t piece, signed char y, signed char x);
//Note for allegro simulator:
//BUTTONS 0 to 7 are mapped from Q to I. You can change this in buttons_and_timers.c variable button_map!
int main(void)
{
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
	//REMEMBER VARIABLES BEFORE CODE!
	//Connect buttons to PORTB with pull-up resistors
	unsigned char redraw = 0, cleared_rows = 0, drop_piece_f = 0;
    1abc:	19 82       	std	Y+1, r1	; 0x01
	unsigned int piece_fall_time = 50; //ms para que empiece rapido la animacion
	unsigned long int score = 0;
    1abe:	1a 82       	std	Y+2, r1	; 0x02
    1ac0:	1b 82       	std	Y+3, r1	; 0x03
    1ac2:	1c 82       	std	Y+4, r1	; 0x04
    1ac4:	1d 82       	std	Y+5, r1	; 0x05
	signed char x, y;
	piece_type_t piece;
	rotation_t rotation;
	game_states_t current_state = PRE_START;
    1ac6:	1a 86       	std	Y+10, r1	; 0x0a
	block_t empty;
	//DO NOT FORGET THIS FUNCTION
	init_row_pointers();
    1ac8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <init_row_pointers>

	configure_spi_max7219_display();
    1acc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <configure_spi_max7219_display>
	empty.fall_piece = 0;
    1ad0:	41 2c       	mov	r4, r1
    1ad2:	e8 94       	clt
    1ad4:	40 f8       	bld	r4, 0
	empty.redraw = 1;
    1ad6:	68 94       	set
    1ad8:	41 f8       	bld	r4, 1
	empty.piece_type = NO_PIECE;
    1ada:	24 2d       	mov	r18, r4
    1adc:	2f 71       	andi	r18, 0x1F	; 31
    1ade:	42 2e       	mov	r4, r18
	LEDdisplay_init();
    1ae0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LEDdisplay_init>
	buttons_and_timers_init();
    1ae4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <buttons_and_timers_init>
	set_timer_period_ms(TIMER_0, piece_fall_time);
    1ae8:	62 e3       	ldi	r22, 0x32	; 50
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
	clear_board_to_block(empty);
    1af2:	84 2d       	mov	r24, r4
    1af4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clear_board_to_block>
	update_display_data();
    1af8:	0e 94 96 03 	call	0x72c	; 0x72c <update_display_data>
	//This is to indicate that device is working and waiting for input to seed rand
	LEDdisplay_set_pixel(0, 0, LEDdisplay_map_rgb(255, 255, 255));
    1afc:	4f ef       	ldi	r20, 0xFF	; 255
    1afe:	6f ef       	ldi	r22, 0xFF	; 255
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LEDdisplay_map_rgb>
    1b06:	9b 01       	movw	r18, r22
    1b08:	48 2f       	mov	r20, r24
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LEDdisplay_set_pixel>
	LEDdisplay_set_pixel(DISPLAY_WIDTH - 1, 0, LEDdisplay_map_rgb(255, 255, 255));
    1b12:	4f ef       	ldi	r20, 0xFF	; 255
    1b14:	6f ef       	ldi	r22, 0xFF	; 255
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
    1b18:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LEDdisplay_map_rgb>
    1b1c:	9b 01       	movw	r18, r22
    1b1e:	48 2f       	mov	r20, r24
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	87 e0       	ldi	r24, 0x07	; 7
    1b24:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LEDdisplay_set_pixel>
	LEDdisplay_set_pixel(0, DISPLAY_HEIGHT - 1, LEDdisplay_map_rgb(255, 255, 255));
    1b28:	4f ef       	ldi	r20, 0xFF	; 255
    1b2a:	6f ef       	ldi	r22, 0xFF	; 255
    1b2c:	8f ef       	ldi	r24, 0xFF	; 255
    1b2e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LEDdisplay_map_rgb>
    1b32:	9b 01       	movw	r18, r22
    1b34:	48 2f       	mov	r20, r24
    1b36:	6f e1       	ldi	r22, 0x1F	; 31
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LEDdisplay_set_pixel>
	LEDdisplay_set_pixel(DISPLAY_WIDTH - 1, DISPLAY_HEIGHT - 1, LEDdisplay_map_rgb(255, 255, 255));
    1b3e:	4f ef       	ldi	r20, 0xFF	; 255
    1b40:	6f ef       	ldi	r22, 0xFF	; 255
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LEDdisplay_map_rgb>
    1b48:	9b 01       	movw	r18, r22
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	6f e1       	ldi	r22, 0x1F	; 31
    1b4e:	87 e0       	ldi	r24, 0x07	; 7
    1b50:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LEDdisplay_set_pixel>

	LEDdisplay_update();
    1b54:	0e 94 45 03 	call	0x68a	; 0x68a <LEDdisplay_update>
	send_number_display(12345678);
    1b58:	6e e4       	ldi	r22, 0x4E	; 78
    1b5a:	71 e6       	ldi	r23, 0x61	; 97
    1b5c:	8c eb       	ldi	r24, 0xBC	; 188
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 af 01 	call	0x35e	; 0x35e <send_number_display>
	seed_rand();
    1b64:	0e 94 5d 03 	call	0x6ba	; 0x6ba <seed_rand>
	clear_board_to_block(empty);
    1b68:	84 2d       	mov	r24, r4
    1b6a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clear_board_to_block>
	update_display_data();
    1b6e:	0e 94 96 03 	call	0x72c	; 0x72c <update_display_data>
	LEDdisplay_update();
    1b72:	0e 94 45 03 	call	0x68a	; 0x68a <LEDdisplay_update>
	set_button_repeat_period_ms(100);
    1b76:	84 e6       	ldi	r24, 0x64	; 100
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <set_button_repeat_period_ms>
	flush_event_queue();
    1b7e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <flush_event_queue>
int main(void)
{
	//REMEMBER VARIABLES BEFORE CODE!
	//Connect buttons to PORTB with pull-up resistors
	unsigned char redraw = 0, cleared_rows = 0, drop_piece_f = 0;
	unsigned int piece_fall_time = 50; //ms para que empiece rapido la animacion
    1b82:	0f 2e       	mov	r0, r31
    1b84:	f2 e3       	ldi	r31, 0x32	; 50
    1b86:	8f 2e       	mov	r8, r31
    1b88:	91 2c       	mov	r9, r1
    1b8a:	f0 2d       	mov	r31, r0
//BUTTONS 0 to 7 are mapped from Q to I. You can change this in buttons_and_timers.c variable button_map!
int main(void)
{
	//REMEMBER VARIABLES BEFORE CODE!
	//Connect buttons to PORTB with pull-up resistors
	unsigned char redraw = 0, cleared_rows = 0, drop_piece_f = 0;
    1b8c:	31 2c       	mov	r3, r1
					}
					else if (y <= 4 && is_game_over()) // no point in checking if y is over 4
						current_state = GAME_FINISHED_ANIMATION;
					else
					{
						place_falling_piece(x = DROP_XCORD, y = DROP_YCORD, piece = (rand() % TOTAL_PIECES) + 1, rotation = rand() % TOTAL_ORIENTATIONS);//cambiar por and dsp
    1b8e:	0f 2e       	mov	r0, r31
    1b90:	f7 e0       	ldi	r31, 0x07	; 7
    1b92:	6f 2e       	mov	r6, r31
    1b94:	71 2c       	mov	r7, r1
    1b96:	f0 2d       	mov	r31, r0
    1b98:	bb 24       	eor	r11, r11
    1b9a:	b3 94       	inc	r11
    1b9c:	68 94       	set
    1b9e:	aa 24       	eor	r10, r10
    1ba0:	a1 f8       	bld	r10, 1
					{
						set_timer_period_ms(TIMER_0, 200); //Clear screen time
						current_state = CLEARING_ROWS;//desactivar el redraw
					}
					else if (y <= 4 && is_game_over()) // no point in checking if y is over 4
						current_state = GAME_FINISHED_ANIMATION;
    1ba2:	0f 2e       	mov	r0, r31
    1ba4:	f6 e0       	ldi	r31, 0x06	; 6
    1ba6:	5f 2e       	mov	r5, r31
    1ba8:	f0 2d       	mov	r31, r0
	flush_event_queue();
	for (;;)
	{
		EVENT_T ev;
		redraw = 0;
		configure_spi_max7219_display();
    1baa:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <configure_spi_max7219_display>
		send_number_display(score);
    1bae:	6a 81       	ldd	r22, Y+2	; 0x02
    1bb0:	7b 81       	ldd	r23, Y+3	; 0x03
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb6:	0e 94 af 01 	call	0x35e	; 0x35e <send_number_display>
		wait_for_event(&ev);
    1bba:	ce 01       	movw	r24, r28
    1bbc:	0b 96       	adiw	r24, 0x0b	; 11
    1bbe:	0e 94 82 02 	call	0x504	; 0x504 <wait_for_event>

		switch (current_state)
    1bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc4:	83 30       	cpi	r24, 0x03	; 3
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <main+0x122>
    1bc8:	74 c0       	rjmp	.+232    	; 0x1cb2 <main+0x20a>
    1bca:	28 f4       	brcc	.+10     	; 0x1bd6 <main+0x12e>
    1bcc:	88 23       	and	r24, r24
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <main+0x140>
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	b1 f1       	breq	.+108    	; 0x1c40 <main+0x198>
    1bd4:	ea cf       	rjmp	.-44     	; 0x1baa <main+0x102>
    1bd6:	85 30       	cpi	r24, 0x05	; 5
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <main+0x134>
    1bda:	ee c0       	rjmp	.+476    	; 0x1db8 <main+0x310>
    1bdc:	08 f4       	brcc	.+2      	; 0x1be0 <main+0x138>
    1bde:	4b c1       	rjmp	.+662    	; 0x1e76 <main+0x3ce>
    1be0:	86 30       	cpi	r24, 0x06	; 6
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <main+0x13e>
    1be4:	82 c1       	rjmp	.+772    	; 0x1eea <main+0x442>
    1be6:	e1 cf       	rjmp	.-62     	; 0x1baa <main+0x102>
		{
		case PRE_START:
			score = 0;
    1be8:	1a 82       	std	Y+2, r1	; 0x02
    1bea:	1b 82       	std	Y+3, r1	; 0x03
    1bec:	1c 82       	std	Y+4, r1	; 0x04
    1bee:	1d 82       	std	Y+5, r1	; 0x05
			send_number_display(score);
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	0e 94 af 01 	call	0x35e	; 0x35e <send_number_display>
			draw_letter_t(PIECE_I, HIDDEN_ROWS + 1, 1);
    1bfa:	4b 2d       	mov	r20, r11
    1bfc:	65 e0       	ldi	r22, 0x05	; 5
    1bfe:	8b 2d       	mov	r24, r11
    1c00:	0e 94 8e 0a 	call	0x151c	; 0x151c <draw_letter_t>
			draw_letter_e(PIECE_J, HIDDEN_ROWS + 6, 4);
    1c04:	44 e0       	ldi	r20, 0x04	; 4
    1c06:	6a e0       	ldi	r22, 0x0A	; 10
    1c08:	8a 2d       	mov	r24, r10
    1c0a:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <draw_letter_e>
			draw_letter_t(PIECE_L, HIDDEN_ROWS + 11, 1);
    1c0e:	4b 2d       	mov	r20, r11
    1c10:	6f e0       	ldi	r22, 0x0F	; 15
    1c12:	83 e0       	ldi	r24, 0x03	; 3
    1c14:	0e 94 8e 0a 	call	0x151c	; 0x151c <draw_letter_t>
			draw_letter_r(PIECE_O, HIDDEN_ROWS + 16, 4);
    1c18:	44 e0       	ldi	r20, 0x04	; 4
    1c1a:	64 e1       	ldi	r22, 0x14	; 20
    1c1c:	84 e0       	ldi	r24, 0x04	; 4
    1c1e:	0e 94 8e 0b 	call	0x171c	; 0x171c <draw_letter_r>
			draw_letter_i(PIECE_S, HIDDEN_ROWS + 21, 1);
    1c22:	4b 2d       	mov	r20, r11
    1c24:	69 e1       	ldi	r22, 0x19	; 25
    1c26:	85 e0       	ldi	r24, 0x05	; 5
    1c28:	0e 94 3d 0c 	call	0x187a	; 0x187a <draw_letter_i>
			draw_letter_s(PIECE_T, HIDDEN_ROWS + 26, 4);
    1c2c:	44 e0       	ldi	r20, 0x04	; 4
    1c2e:	6e e1       	ldi	r22, 0x1E	; 30
    1c30:	85 2d       	mov	r24, r5
    1c32:	0e 94 bf 0c 	call	0x197e	; 0x197e <draw_letter_s>
			if (ev.id == BUTTON_PRESS)
    1c36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c38:	81 11       	cpse	r24, r1
    1c3a:	6e c1       	rjmp	.+732    	; 0x1f18 <main+0x470>
				current_state = GAME_START;
    1c3c:	ba 86       	std	Y+10, r11	; 0x0a
    1c3e:	6c c1       	rjmp	.+728    	; 0x1f18 <main+0x470>
			redraw = 1;
			break;
		case GAME_START:

			flush_event_queue();
    1c40:	0e 94 db 02 	call	0x5b6	; 0x5b6 <flush_event_queue>
			clear_board_to_block(empty);
    1c44:	84 2d       	mov	r24, r4
    1c46:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clear_board_to_block>
			place_falling_piece(x = DROP_XCORD, y = DROP_YCORD, piece = (rand() % TOTAL_PIECES) + 1, rotation = rand() % TOTAL_ORIENTATIONS); //DESPUES CAMBIAR RESTO/MODULO
    1c4a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <rand>
    1c4e:	83 70       	andi	r24, 0x03	; 3
    1c50:	90 78       	andi	r25, 0x80	; 128
    1c52:	4c 01       	movw	r8, r24
    1c54:	99 23       	and	r25, r25
    1c56:	54 f4       	brge	.+20     	; 0x1c6c <main+0x1c4>
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	88 1a       	sub	r8, r24
    1c5c:	91 08       	sbc	r9, r1
    1c5e:	9c ef       	ldi	r25, 0xFC	; 252
    1c60:	89 2a       	or	r8, r25
    1c62:	99 24       	eor	r9, r9
    1c64:	9a 94       	dec	r9
    1c66:	2f ef       	ldi	r18, 0xFF	; 255
    1c68:	82 1a       	sub	r8, r18
    1c6a:	92 0a       	sbc	r9, r18
    1c6c:	89 86       	std	Y+9, r8	; 0x09
    1c6e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <rand>
    1c72:	b3 01       	movw	r22, r6
    1c74:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__divmodhi4>
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	48 0f       	add	r20, r24
    1c7c:	48 87       	std	Y+8, r20	; 0x08
    1c7e:	bf 82       	std	Y+7, r11	; 0x07
    1c80:	ae 82       	std	Y+6, r10	; 0x06
    1c82:	28 2d       	mov	r18, r8
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	82 e0       	ldi	r24, 0x02	; 2
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
			update_display_data();
    1c90:	0e 94 96 03 	call	0x72c	; 0x72c <update_display_data>
			LEDdisplay_update();
    1c94:	0e 94 45 03 	call	0x68a	; 0x68a <LEDdisplay_update>
			current_state = NORMAL_PLAY;
    1c98:	83 e0       	ldi	r24, 0x03	; 3
    1c9a:	8a 87       	std	Y+10, r24	; 0x0a
			set_timer_period_ms(TIMER_0, piece_fall_time = game_speed[0]);//FALL TIME
    1c9c:	68 ec       	ldi	r22, 0xC8	; 200
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
    1ca6:	0f 2e       	mov	r0, r31
    1ca8:	f8 ec       	ldi	r31, 0xC8	; 200
    1caa:	8f 2e       	mov	r8, r31
    1cac:	91 2c       	mov	r9, r1
    1cae:	f0 2d       	mov	r31, r0

			break;
    1cb0:	7c cf       	rjmp	.-264    	; 0x1baa <main+0x102>

		case NORMAL_PLAY:
			switch (ev.id)
    1cb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	e1 f0       	breq	.+56     	; 0x1cf0 <main+0x248>
    1cb8:	18 f0       	brcs	.+6      	; 0x1cc0 <main+0x218>
    1cba:	83 30       	cpi	r24, 0x03	; 3
    1cbc:	19 f1       	breq	.+70     	; 0x1d04 <main+0x25c>
    1cbe:	75 cf       	rjmp	.-278    	; 0x1baa <main+0x102>
			{
			case BUTTON_PRESS:
				if (!drop_piece_f) // If a piece is hard dropping, (joystick moved up) no other events button events are attended
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	81 11       	cpse	r24, r1
    1cc4:	72 cf       	rjmp	.-284    	; 0x1baa <main+0x102>
				{
					manage_button_down(&x, &y, &piece, &rotation, &ev, &drop_piece_f, &current_state);
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	0a 96       	adiw	r24, 0x0a	; 10
    1cca:	6c 01       	movw	r12, r24
    1ccc:	09 97       	sbiw	r24, 0x09	; 9
    1cce:	7c 01       	movw	r14, r24
    1cd0:	8e 01       	movw	r16, r28
    1cd2:	05 5f       	subi	r16, 0xF5	; 245
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	9e 01       	movw	r18, r28
    1cd8:	27 5f       	subi	r18, 0xF7	; 247
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	ae 01       	movw	r20, r28
    1cde:	48 5f       	subi	r20, 0xF8	; 248
    1ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce2:	be 01       	movw	r22, r28
    1ce4:	69 5f       	subi	r22, 0xF9	; 249
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	05 96       	adiw	r24, 0x05	; 5
    1cea:	0e 94 f6 08 	call	0x11ec	; 0x11ec <manage_button_down>
    1cee:	14 c1       	rjmp	.+552    	; 0x1f18 <main+0x470>
					redraw = 1;
				}
				break;

			case BUTTON_REPEAT: //Instead of detecting button repeat, it's send to priority queue as button press
				if (ev.data == JOYSTICK_UP || ev.data == JOYSTICK_DOWN || ev.data == JOYSTICK_LEFT || ev.data == JOYSTICK_RIGHT) //Only repeat the movement buttons no the rotating
    1cf0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cf2:	84 30       	cpi	r24, 0x04	; 4
    1cf4:	08 f0       	brcs	.+2      	; 0x1cf8 <main+0x250>
    1cf6:	59 cf       	rjmp	.-334    	; 0x1baa <main+0x102>
				{
					ev.id = BUTTON_PRESS;
    1cf8:	1b 86       	std	Y+11, r1	; 0x0b
					register_event_in_priority_queue(&ev);
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	0b 96       	adiw	r24, 0x0b	; 11
    1cfe:	0e 94 50 02 	call	0x4a0	; 0x4a0 <register_event_in_priority_queue>
    1d02:	53 cf       	rjmp	.-346    	; 0x1baa <main+0x102>
				}
				break;

			case TIMER:

				if (move_piece_down(x, y, piece, rotation))
    1d04:	29 85       	ldd	r18, Y+9	; 0x09
    1d06:	48 85       	ldd	r20, Y+8	; 0x08
    1d08:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0c:	0e 94 93 05 	call	0xb26	; 0xb26 <move_piece_down>
    1d10:	88 23       	and	r24, r24
    1d12:	21 f0       	breq	.+8      	; 0x1d1c <main+0x274>
				{
					y++;
    1d14:	8f 81       	ldd	r24, Y+7	; 0x07
    1d16:	8f 5f       	subi	r24, 0xFF	; 255
    1d18:	8f 83       	std	Y+7, r24	; 0x07
    1d1a:	fe c0       	rjmp	.+508    	; 0x1f18 <main+0x470>
					redraw = 1;
				}
				else
				{
					place_static_piece(x, y, piece, rotation);
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	06 2e       	mov	r0, r22
    1d20:	00 0c       	add	r0, r0
    1d22:	77 0b       	sbc	r23, r23
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	29 85       	ldd	r18, Y+9	; 0x09
    1d28:	48 85       	ldd	r20, Y+8	; 0x08
    1d2a:	08 2e       	mov	r0, r24
    1d2c:	00 0c       	add	r0, r0
    1d2e:	99 0b       	sbc	r25, r25
    1d30:	0e 94 46 05 	call	0xa8c	; 0xa8c <place_static_piece>
					if (drop_piece_f)
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	88 23       	and	r24, r24
    1d38:	41 f0       	breq	.+16     	; 0x1d4a <main+0x2a2>
					{
						drop_piece_f ^= 1; //sets to 0
    1d3a:	8b 25       	eor	r24, r11
    1d3c:	89 83       	std	Y+1, r24	; 0x01
						set_timer_period_ms(TIMER_0, piece_fall_time);//FALL TIME
    1d3e:	b4 01       	movw	r22, r8
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
						flush_event_queue();
    1d46:	0e 94 db 02 	call	0x5b6	; 0x5b6 <flush_event_queue>
					}
					cleared_rows = check_cleared_rows(y);
    1d4a:	1f 81       	ldd	r17, Y+7	; 0x07
    1d4c:	81 2f       	mov	r24, r17
    1d4e:	0e 94 76 08 	call	0x10ec	; 0x10ec <check_cleared_rows>
    1d52:	38 2e       	mov	r3, r24
					if (cleared_rows)
    1d54:	88 23       	and	r24, r24
    1d56:	41 f0       	breq	.+16     	; 0x1d68 <main+0x2c0>
					{
						set_timer_period_ms(TIMER_0, 200); //Clear screen time
    1d58:	68 ec       	ldi	r22, 0xC8	; 200
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
						current_state = CLEARING_ROWS;//desactivar el redraw
    1d62:	85 e0       	ldi	r24, 0x05	; 5
    1d64:	8a 87       	std	Y+10, r24	; 0x0a
    1d66:	21 cf       	rjmp	.-446    	; 0x1baa <main+0x102>
					}
					else if (y <= 4 && is_game_over()) // no point in checking if y is over 4
    1d68:	15 30       	cpi	r17, 0x05	; 5
    1d6a:	34 f4       	brge	.+12     	; 0x1d78 <main+0x2d0>
    1d6c:	0e 94 cf 08 	call	0x119e	; 0x119e <is_game_over>
    1d70:	88 23       	and	r24, r24
    1d72:	11 f0       	breq	.+4      	; 0x1d78 <main+0x2d0>
						current_state = GAME_FINISHED_ANIMATION;
    1d74:	5a 86       	std	Y+10, r5	; 0x0a
    1d76:	19 cf       	rjmp	.-462    	; 0x1baa <main+0x102>
					else
					{
						place_falling_piece(x = DROP_XCORD, y = DROP_YCORD, piece = (rand() % TOTAL_PIECES) + 1, rotation = rand() % TOTAL_ORIENTATIONS);//cambiar por and dsp
    1d78:	0e 94 54 10 	call	0x20a8	; 0x20a8 <rand>
    1d7c:	8c 01       	movw	r16, r24
    1d7e:	03 70       	andi	r16, 0x03	; 3
    1d80:	10 78       	andi	r17, 0x80	; 128
    1d82:	11 23       	and	r17, r17
    1d84:	34 f4       	brge	.+12     	; 0x1d92 <main+0x2ea>
    1d86:	01 50       	subi	r16, 0x01	; 1
    1d88:	11 09       	sbc	r17, r1
    1d8a:	0c 6f       	ori	r16, 0xFC	; 252
    1d8c:	1f 6f       	ori	r17, 0xFF	; 255
    1d8e:	0f 5f       	subi	r16, 0xFF	; 255
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	09 87       	std	Y+9, r16	; 0x09
    1d94:	0e 94 54 10 	call	0x20a8	; 0x20a8 <rand>
    1d98:	b3 01       	movw	r22, r6
    1d9a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__divmodhi4>
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	48 0f       	add	r20, r24
    1da2:	48 87       	std	Y+8, r20	; 0x08
    1da4:	bf 82       	std	Y+7, r11	; 0x07
    1da6:	ae 82       	std	Y+6, r10	; 0x06
    1da8:	20 2f       	mov	r18, r16
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
    1db6:	b0 c0       	rjmp	.+352    	; 0x1f18 <main+0x470>
				break;
			}
			break;

		case CLEARING_ROWS:
			if (ev.id == TIMER)
    1db8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dba:	83 30       	cpi	r24, 0x03	; 3
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <main+0x318>
    1dbe:	f5 ce       	rjmp	.-534    	; 0x1baa <main+0x102>
			{
				if (clearing_row_animation(y, cleared_rows, &score))//If clear row animation finished
    1dc0:	ae 01       	movw	r20, r28
    1dc2:	4e 5f       	subi	r20, 0xFE	; 254
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	63 2d       	mov	r22, r3
    1dc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dca:	0e 94 ed 09 	call	0x13da	; 0x13da <clearing_row_animation>
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <main+0x32c>
    1dd2:	a2 c0       	rjmp	.+324    	; 0x1f18 <main+0x470>
				{
					if (is_game_over())//might still be game over after clearing
    1dd4:	0e 94 cf 08 	call	0x119e	; 0x119e <is_game_over>
    1dd8:	88 23       	and	r24, r24
    1dda:	11 f0       	breq	.+4      	; 0x1de0 <main+0x338>
						current_state = GAME_FINISHED_ANIMATION;
    1ddc:	5a 86       	std	Y+10, r5	; 0x0a
    1dde:	9c c0       	rjmp	.+312    	; 0x1f18 <main+0x470>
					else
					{
						place_falling_piece(x = DROP_XCORD, y = DROP_YCORD, piece = (rand() % TOTAL_PIECES) + 1, rotation = rand() % TOTAL_ORIENTATIONS);//cambiar por and dsp
    1de0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <rand>
    1de4:	8c 01       	movw	r16, r24
    1de6:	03 70       	andi	r16, 0x03	; 3
    1de8:	10 78       	andi	r17, 0x80	; 128
    1dea:	11 23       	and	r17, r17
    1dec:	34 f4       	brge	.+12     	; 0x1dfa <main+0x352>
    1dee:	01 50       	subi	r16, 0x01	; 1
    1df0:	11 09       	sbc	r17, r1
    1df2:	0c 6f       	ori	r16, 0xFC	; 252
    1df4:	1f 6f       	ori	r17, 0xFF	; 255
    1df6:	0f 5f       	subi	r16, 0xFF	; 255
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	09 87       	std	Y+9, r16	; 0x09
    1dfc:	0e 94 54 10 	call	0x20a8	; 0x20a8 <rand>
    1e00:	b3 01       	movw	r22, r6
    1e02:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__divmodhi4>
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	48 0f       	add	r20, r24
    1e0a:	48 87       	std	Y+8, r20	; 0x08
    1e0c:	bf 82       	std	Y+7, r11	; 0x07
    1e0e:	ae 82       	std	Y+6, r10	; 0x06
    1e10:	20 2f       	mov	r18, r16
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
						current_state = NORMAL_PLAY;
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	8a 87       	std	Y+10, r24	; 0x0a
						piece_fall_time = ((score / SCORE_LEVEL_UP) < NUMBER_SPEEDS) ? game_speed[score / SCORE_LEVEL_UP] : game_speed[NUMBER_SPEEDS - 1];
    1e22:	6a 81       	ldd	r22, Y+2	; 0x02
    1e24:	7b 81       	ldd	r23, Y+3	; 0x03
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2a:	60 38       	cpi	r22, 0x80	; 128
    1e2c:	2c e0       	ldi	r18, 0x0C	; 12
    1e2e:	72 07       	cpc	r23, r18
    1e30:	81 05       	cpc	r24, r1
    1e32:	91 05       	cpc	r25, r1
    1e34:	70 f4       	brcc	.+28     	; 0x1e52 <main+0x3aa>
    1e36:	28 ec       	ldi	r18, 0xC8	; 200
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__udivmodsi4>
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	f9 01       	movw	r30, r18
    1e48:	e8 5c       	subi	r30, 0xC8	; 200
    1e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e4c:	80 80       	ld	r8, Z
    1e4e:	91 80       	ldd	r9, Z+1	; 0x01
    1e50:	05 c0       	rjmp	.+10     	; 0x1e5c <main+0x3b4>
    1e52:	0f 2e       	mov	r0, r31
    1e54:	f2 e3       	ldi	r31, 0x32	; 50
    1e56:	8f 2e       	mov	r8, r31
    1e58:	91 2c       	mov	r9, r1
    1e5a:	f0 2d       	mov	r31, r0
						set_timer_period_ms(TIMER_0, piece_fall_time);//FALL TIME
    1e5c:	b4 01       	movw	r22, r8
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
						send_number_display(score);
    1e64:	6a 81       	ldd	r22, Y+2	; 0x02
    1e66:	7b 81       	ldd	r23, Y+3	; 0x03
    1e68:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6c:	0e 94 af 01 	call	0x35e	; 0x35e <send_number_display>
						update_all_display_data();
    1e70:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <update_all_display_data>
    1e74:	51 c0       	rjmp	.+162    	; 0x1f18 <main+0x470>
				redraw = 1;
			}
			break;

		case GAME_PAUSED:
			if (ev.id == TIMER)
    1e76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e78:	83 30       	cpi	r24, 0x03	; 3
    1e7a:	61 f4       	brne	.+24     	; 0x1e94 <main+0x3ec>
			{
				set_timer_period_ms(TIMER_0, 400);
    1e7c:	60 e9       	ldi	r22, 0x90	; 144
    1e7e:	71 e0       	ldi	r23, 0x01	; 1
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
				game_pause_animation(x, y, piece, rotation);
    1e86:	29 85       	ldd	r18, Y+9	; 0x09
    1e88:	48 85       	ldd	r20, Y+8	; 0x08
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <game_pause_animation>
    1e92:	42 c0       	rjmp	.+132    	; 0x1f18 <main+0x470>
				redraw = 1;
			}
			else if (ev.id == BUTTON_PRESS && ev.data == BUTTON_6) //Resumes games
    1e94:	81 11       	cpse	r24, r1
    1e96:	89 ce       	rjmp	.-750    	; 0x1baa <main+0x102>
    1e98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e9a:	86 30       	cpi	r24, 0x06	; 6
    1e9c:	a9 f4       	brne	.+42     	; 0x1ec8 <main+0x420>
			{
				set_timer_period_ms(TIMER_0, piece_fall_time);
    1e9e:	b4 01       	movw	r22, r8
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
				place_falling_piece(x, y, piece, rotation);
    1ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea8:	06 2e       	mov	r0, r22
    1eaa:	00 0c       	add	r0, r0
    1eac:	77 0b       	sbc	r23, r23
    1eae:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb0:	29 85       	ldd	r18, Y+9	; 0x09
    1eb2:	48 85       	ldd	r20, Y+8	; 0x08
    1eb4:	08 2e       	mov	r0, r24
    1eb6:	00 0c       	add	r0, r0
    1eb8:	99 0b       	sbc	r25, r25
    1eba:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
				update_all_display_data();
    1ebe:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <update_all_display_data>
				current_state = NORMAL_PLAY; //RESUME_GAME
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	8a 87       	std	Y+10, r24	; 0x0a
    1ec6:	71 ce       	rjmp	.-798    	; 0x1baa <main+0x102>
			}
			else if (ev.id == BUTTON_PRESS && ev.data == BUTTON_7) // Reset game
    1ec8:	87 30       	cpi	r24, 0x07	; 7
    1eca:	09 f0       	breq	.+2      	; 0x1ece <main+0x426>
    1ecc:	6e ce       	rjmp	.-804    	; 0x1baa <main+0x102>
			{
				place_falling_piece(x, y, piece, rotation);
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	06 2e       	mov	r0, r22
    1ed2:	00 0c       	add	r0, r0
    1ed4:	77 0b       	sbc	r23, r23
    1ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed8:	29 85       	ldd	r18, Y+9	; 0x09
    1eda:	48 85       	ldd	r20, Y+8	; 0x08
    1edc:	08 2e       	mov	r0, r24
    1ede:	00 0c       	add	r0, r0
    1ee0:	99 0b       	sbc	r25, r25
    1ee2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <place_falling_piece>
				current_state = GAME_FINISHED_ANIMATION;
    1ee6:	5a 86       	std	Y+10, r5	; 0x0a
    1ee8:	60 ce       	rjmp	.-832    	; 0x1baa <main+0x102>
			}
			break;


		case GAME_FINISHED_ANIMATION:
			if (ev.id == TIMER)
    1eea:	8b 85       	ldd	r24, Y+11	; 0x0b
    1eec:	83 30       	cpi	r24, 0x03	; 3
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <main+0x44a>
    1ef0:	5c ce       	rjmp	.-840    	; 0x1baa <main+0x102>
			{
				if (game_end_animation(&y, piece))
    1ef2:	68 85       	ldd	r22, Y+8	; 0x08
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	07 96       	adiw	r24, 0x07	; 7
    1ef8:	0e 94 c1 09 	call	0x1382	; 0x1382 <game_end_animation>
    1efc:	88 23       	and	r24, r24
    1efe:	61 f0       	breq	.+24     	; 0x1f18 <main+0x470>
				{
					set_timer_period_ms(TIMER_0, 50);//So that the animation happens faster
    1f00:	62 e3       	ldi	r22, 0x32	; 50
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	0e 94 03 01 	call	0x206	; 0x206 <set_timer_period_ms>
					current_state = PRE_START;
    1f0a:	1a 86       	std	Y+10, r1	; 0x0a
    1f0c:	05 c0       	rjmp	.+10     	; 0x1f18 <main+0x470>
		}


		if (redraw && !get_total_events_in_queue())  //This is important.
		{
			update_display_data();
    1f0e:	0e 94 96 03 	call	0x72c	; 0x72c <update_display_data>
			//So, there are about 25ms left for other things!
			//We want to have some spare time, just waiting for new events,
			//so that next interrupt arrives when display is not being updated.
			//else, interrupt will be postponed (interrupts are disabled while sending data),
			//and so will events!
			LEDdisplay_update();
    1f12:	0e 94 45 03 	call	0x68a	; 0x68a <LEDdisplay_update>
    1f16:	49 ce       	rjmp	.-878    	; 0x1baa <main+0x102>

			break;
		}


		if (redraw && !get_total_events_in_queue())  //This is important.
    1f18:	0e 94 13 02 	call	0x426	; 0x426 <get_total_events_in_queue>
    1f1c:	89 2b       	or	r24, r25
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <main+0x47a>
    1f20:	44 ce       	rjmp	.-888    	; 0x1baa <main+0x102>
    1f22:	f5 cf       	rjmp	.-22     	; 0x1f0e <main+0x466>

00001f24 <init_SPI>:

// Driver Init
void init_SPI(void)
{
	// Set MOSI, SS and SCK output, all others inputs
	DDR_SPI = 1 << DD_MOSI | 1 << DD_SS | 1 << DD_SCK;
    1f24:	8c e2       	ldi	r24, 0x2C	; 44
    1f26:	84 b9       	out	0x04, r24	; 4
	//Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1f28:	81 e5       	ldi	r24, 0x51	; 81
    1f2a:	8c bd       	out	0x2c, r24	; 44
    1f2c:	08 95       	ret

00001f2e <putwspi0>:

	char high,low;
	high = (char)(word >> 8);
	low = (char)word;
	//SS
	DD_SPIPORT &= ~(DD_SS << 0);
    1f2e:	29 98       	cbi	0x05, 1	; 5
	//Wail until write is possible
	while(!(SPSR & (1<<SPIF)));
    1f30:	0d b4       	in	r0, 0x2d	; 45
    1f32:	07 fe       	sbrs	r0, 7
    1f34:	fd cf       	rjmp	.-6      	; 0x1f30 <putwspi0+0x2>
	//Output High Byte
	SPDR = high;
    1f36:	9e bd       	out	0x2e, r25	; 46
	//Wail until write is finished
	while(!(SPSR & (1<<SPIF)));
    1f38:	0d b4       	in	r0, 0x2d	; 45
    1f3a:	07 fe       	sbrs	r0, 7
    1f3c:	fd cf       	rjmp	.-6      	; 0x1f38 <putwspi0+0xa>
	//Output Low Byte
	SPDR = low;
    1f3e:	8e bd       	out	0x2e, r24	; 46
	//Wail until write is finished
	while(!(SPSR & (1<<SPIF)));
    1f40:	0d b4       	in	r0, 0x2d	; 45
    1f42:	07 fe       	sbrs	r0, 7
    1f44:	fd cf       	rjmp	.-6      	; 0x1f40 <putwspi0+0x12>
	//SS
	DD_SPIPORT |= (DD_SS << 0);
    1f46:	29 9a       	sbi	0x05, 1	; 5
    1f48:	08 95       	ret

00001f4a <WS2812B_Set_Data_Length>:
// OC6  pin 17 H3   (Din WS2812B)
// OC7  pin 18 H3   (Scope Test Point)

// ======================================

void WS2812B_Set_Data_Length( unsigned int length ) {
    1f4a:	08 95       	ret

00001f4c <WS2812B_Set_Data_pointer>:
        ByteCtr=length;    //


}

void WS2812B_Set_Data_pointer( unsigned char *data_ptr ) {
    1f4c:	08 95       	ret

00001f4e <WS2812B_Send_data>:



void WS2812B_Send_data(void)  // Important we don't use any local variables for speed reasons

{
    1f4e:	08 95       	ret

00001f50 <WS2812B_Init>:
//===============================================================


void WS2812B_Init(void)

{
    1f50:	08 95       	ret

00001f52 <__divmodhi4>:
    1f52:	97 fb       	bst	r25, 7
    1f54:	07 2e       	mov	r0, r23
    1f56:	16 f4       	brtc	.+4      	; 0x1f5c <__divmodhi4+0xa>
    1f58:	00 94       	com	r0
    1f5a:	07 d0       	rcall	.+14     	; 0x1f6a <__divmodhi4_neg1>
    1f5c:	77 fd       	sbrc	r23, 7
    1f5e:	09 d0       	rcall	.+18     	; 0x1f72 <__divmodhi4_neg2>
    1f60:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
    1f64:	07 fc       	sbrc	r0, 7
    1f66:	05 d0       	rcall	.+10     	; 0x1f72 <__divmodhi4_neg2>
    1f68:	3e f4       	brtc	.+14     	; 0x1f78 <__divmodhi4_exit>

00001f6a <__divmodhi4_neg1>:
    1f6a:	90 95       	com	r25
    1f6c:	81 95       	neg	r24
    1f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f70:	08 95       	ret

00001f72 <__divmodhi4_neg2>:
    1f72:	70 95       	com	r23
    1f74:	61 95       	neg	r22
    1f76:	7f 4f       	sbci	r23, 0xFF	; 255

00001f78 <__divmodhi4_exit>:
    1f78:	08 95       	ret

00001f7a <__udivmodsi4>:
    1f7a:	a1 e2       	ldi	r26, 0x21	; 33
    1f7c:	1a 2e       	mov	r1, r26
    1f7e:	aa 1b       	sub	r26, r26
    1f80:	bb 1b       	sub	r27, r27
    1f82:	fd 01       	movw	r30, r26
    1f84:	0d c0       	rjmp	.+26     	; 0x1fa0 <__udivmodsi4_ep>

00001f86 <__udivmodsi4_loop>:
    1f86:	aa 1f       	adc	r26, r26
    1f88:	bb 1f       	adc	r27, r27
    1f8a:	ee 1f       	adc	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	a2 17       	cp	r26, r18
    1f90:	b3 07       	cpc	r27, r19
    1f92:	e4 07       	cpc	r30, r20
    1f94:	f5 07       	cpc	r31, r21
    1f96:	20 f0       	brcs	.+8      	; 0x1fa0 <__udivmodsi4_ep>
    1f98:	a2 1b       	sub	r26, r18
    1f9a:	b3 0b       	sbc	r27, r19
    1f9c:	e4 0b       	sbc	r30, r20
    1f9e:	f5 0b       	sbc	r31, r21

00001fa0 <__udivmodsi4_ep>:
    1fa0:	66 1f       	adc	r22, r22
    1fa2:	77 1f       	adc	r23, r23
    1fa4:	88 1f       	adc	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	1a 94       	dec	r1
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <__udivmodsi4_loop>
    1fac:	60 95       	com	r22
    1fae:	70 95       	com	r23
    1fb0:	80 95       	com	r24
    1fb2:	90 95       	com	r25
    1fb4:	9b 01       	movw	r18, r22
    1fb6:	ac 01       	movw	r20, r24
    1fb8:	bd 01       	movw	r22, r26
    1fba:	cf 01       	movw	r24, r30
    1fbc:	08 95       	ret

00001fbe <__tablejump2__>:
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	05 90       	lpm	r0, Z+
    1fc4:	f4 91       	lpm	r31, Z
    1fc6:	e0 2d       	mov	r30, r0
    1fc8:	09 94       	ijmp

00001fca <__umulhisi3>:
    1fca:	a2 9f       	mul	r26, r18
    1fcc:	b0 01       	movw	r22, r0
    1fce:	b3 9f       	mul	r27, r19
    1fd0:	c0 01       	movw	r24, r0
    1fd2:	a3 9f       	mul	r26, r19
    1fd4:	70 0d       	add	r23, r0
    1fd6:	81 1d       	adc	r24, r1
    1fd8:	11 24       	eor	r1, r1
    1fda:	91 1d       	adc	r25, r1
    1fdc:	b2 9f       	mul	r27, r18
    1fde:	70 0d       	add	r23, r0
    1fe0:	81 1d       	adc	r24, r1
    1fe2:	11 24       	eor	r1, r1
    1fe4:	91 1d       	adc	r25, r1
    1fe6:	08 95       	ret

00001fe8 <__udivmodhi4>:
    1fe8:	aa 1b       	sub	r26, r26
    1fea:	bb 1b       	sub	r27, r27
    1fec:	51 e1       	ldi	r21, 0x11	; 17
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <__udivmodhi4_ep>

00001ff0 <__udivmodhi4_loop>:
    1ff0:	aa 1f       	adc	r26, r26
    1ff2:	bb 1f       	adc	r27, r27
    1ff4:	a6 17       	cp	r26, r22
    1ff6:	b7 07       	cpc	r27, r23
    1ff8:	10 f0       	brcs	.+4      	; 0x1ffe <__udivmodhi4_ep>
    1ffa:	a6 1b       	sub	r26, r22
    1ffc:	b7 0b       	sbc	r27, r23

00001ffe <__udivmodhi4_ep>:
    1ffe:	88 1f       	adc	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	5a 95       	dec	r21
    2004:	a9 f7       	brne	.-22     	; 0x1ff0 <__udivmodhi4_loop>
    2006:	80 95       	com	r24
    2008:	90 95       	com	r25
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	08 95       	ret

00002010 <do_rand>:
    2010:	8f 92       	push	r8
    2012:	9f 92       	push	r9
    2014:	af 92       	push	r10
    2016:	bf 92       	push	r11
    2018:	cf 92       	push	r12
    201a:	df 92       	push	r13
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	ec 01       	movw	r28, r24
    2026:	68 81       	ld	r22, Y
    2028:	79 81       	ldd	r23, Y+1	; 0x01
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	9b 81       	ldd	r25, Y+3	; 0x03
    202e:	61 15       	cp	r22, r1
    2030:	71 05       	cpc	r23, r1
    2032:	81 05       	cpc	r24, r1
    2034:	91 05       	cpc	r25, r1
    2036:	21 f4       	brne	.+8      	; 0x2040 <do_rand+0x30>
    2038:	64 e2       	ldi	r22, 0x24	; 36
    203a:	79 ed       	ldi	r23, 0xD9	; 217
    203c:	8b e5       	ldi	r24, 0x5B	; 91
    203e:	97 e0       	ldi	r25, 0x07	; 7
    2040:	2d e1       	ldi	r18, 0x1D	; 29
    2042:	33 ef       	ldi	r19, 0xF3	; 243
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	0e 94 64 10 	call	0x20c8	; 0x20c8 <__divmodsi4>
    204c:	49 01       	movw	r8, r18
    204e:	5a 01       	movw	r10, r20
    2050:	9b 01       	movw	r18, r22
    2052:	ac 01       	movw	r20, r24
    2054:	a7 ea       	ldi	r26, 0xA7	; 167
    2056:	b1 e4       	ldi	r27, 0x41	; 65
    2058:	0e 94 83 10 	call	0x2106	; 0x2106 <__muluhisi3>
    205c:	6b 01       	movw	r12, r22
    205e:	7c 01       	movw	r14, r24
    2060:	ac ee       	ldi	r26, 0xEC	; 236
    2062:	b4 ef       	ldi	r27, 0xF4	; 244
    2064:	a5 01       	movw	r20, r10
    2066:	94 01       	movw	r18, r8
    2068:	0e 94 91 10 	call	0x2122	; 0x2122 <__mulohisi3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	8c 0d       	add	r24, r12
    2072:	9d 1d       	adc	r25, r13
    2074:	ae 1d       	adc	r26, r14
    2076:	bf 1d       	adc	r27, r15
    2078:	b7 ff       	sbrs	r27, 7
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <do_rand+0x72>
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	a1 09       	sbc	r26, r1
    2080:	b0 48       	sbci	r27, 0x80	; 128
    2082:	88 83       	st	Y, r24
    2084:	99 83       	std	Y+1, r25	; 0x01
    2086:	aa 83       	std	Y+2, r26	; 0x02
    2088:	bb 83       	std	Y+3, r27	; 0x03
    208a:	9f 77       	andi	r25, 0x7F	; 127
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	ff 90       	pop	r15
    2092:	ef 90       	pop	r14
    2094:	df 90       	pop	r13
    2096:	cf 90       	pop	r12
    2098:	bf 90       	pop	r11
    209a:	af 90       	pop	r10
    209c:	9f 90       	pop	r9
    209e:	8f 90       	pop	r8
    20a0:	08 95       	ret

000020a2 <rand_r>:
    20a2:	0e 94 08 10 	call	0x2010	; 0x2010 <do_rand>
    20a6:	08 95       	ret

000020a8 <rand>:
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	0e 94 08 10 	call	0x2010	; 0x2010 <do_rand>
    20b0:	08 95       	ret

000020b2 <srand>:
    20b2:	a0 e0       	ldi	r26, 0x00	; 0
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    20ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    20be:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    20c2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    20c6:	08 95       	ret

000020c8 <__divmodsi4>:
    20c8:	05 2e       	mov	r0, r21
    20ca:	97 fb       	bst	r25, 7
    20cc:	1e f4       	brtc	.+6      	; 0x20d4 <__divmodsi4+0xc>
    20ce:	00 94       	com	r0
    20d0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <__negsi2>
    20d4:	57 fd       	sbrc	r21, 7
    20d6:	07 d0       	rcall	.+14     	; 0x20e6 <__divmodsi4_neg2>
    20d8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__udivmodsi4>
    20dc:	07 fc       	sbrc	r0, 7
    20de:	03 d0       	rcall	.+6      	; 0x20e6 <__divmodsi4_neg2>
    20e0:	4e f4       	brtc	.+18     	; 0x20f4 <__divmodsi4_exit>
    20e2:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__negsi2>

000020e6 <__divmodsi4_neg2>:
    20e6:	50 95       	com	r21
    20e8:	40 95       	com	r20
    20ea:	30 95       	com	r19
    20ec:	21 95       	neg	r18
    20ee:	3f 4f       	sbci	r19, 0xFF	; 255
    20f0:	4f 4f       	sbci	r20, 0xFF	; 255
    20f2:	5f 4f       	sbci	r21, 0xFF	; 255

000020f4 <__divmodsi4_exit>:
    20f4:	08 95       	ret

000020f6 <__negsi2>:
    20f6:	90 95       	com	r25
    20f8:	80 95       	com	r24
    20fa:	70 95       	com	r23
    20fc:	61 95       	neg	r22
    20fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2100:	8f 4f       	sbci	r24, 0xFF	; 255
    2102:	9f 4f       	sbci	r25, 0xFF	; 255
    2104:	08 95       	ret

00002106 <__muluhisi3>:
    2106:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__umulhisi3>
    210a:	a5 9f       	mul	r26, r21
    210c:	90 0d       	add	r25, r0
    210e:	b4 9f       	mul	r27, r20
    2110:	90 0d       	add	r25, r0
    2112:	a4 9f       	mul	r26, r20
    2114:	80 0d       	add	r24, r0
    2116:	91 1d       	adc	r25, r1
    2118:	11 24       	eor	r1, r1
    211a:	08 95       	ret

0000211c <__mulshisi3>:
    211c:	b7 ff       	sbrs	r27, 7
    211e:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__muluhisi3>

00002122 <__mulohisi3>:
    2122:	0e 94 83 10 	call	0x2106	; 0x2106 <__muluhisi3>
    2126:	82 1b       	sub	r24, r18
    2128:	93 0b       	sbc	r25, r19
    212a:	08 95       	ret

0000212c <_exit>:
    212c:	f8 94       	cli

0000212e <__stop_program>:
    212e:	ff cf       	rjmp	.-2      	; 0x212e <__stop_program>
