*** EVALUATION ***
ANSI-C/cC++ Compiler for HC12 V-5.0.41 Build 10203, Jul 23 2010

    1:  //#define TP 25  // 1.25 us @ 50ns OCTic
    2:  #include "mc9s12xdp512.h"
    3:  #include "WS2812B.h"
    4:  #include <stdlib.h>
    5:      
    6:  #define OCTIC 50            // 50ns (prescaler must be at 2)  
    7:  #define T1H   800/OCTIC     // 800ns  @ 50ns OCTic
    8:  #define T0H   400/OCTIC     // 400ns  @ 50ns OCTic
    9:  #define TRES  50000/OCTIC   // 50us @ 50ns OCTic
   10:  
   11:  // Variables used by Driver                                     
   12:  
   13:  static unsigned int  delta;
   14:  static unsigned char mask;
   15:  
   16:  // ************* OJO **********
   17:  // OJO ByteCtr debe ser int no char pues el maximo es 32x8x3= 768 me ovide !!!
   18:  // Medir como impacta en los tiempos
   19:    
   20:  //static unsigned char ByteCtr=2;   // How many bytes will be send to WS2812B
   21:  static unsigned int  ByteCtr=2;   // How many bytes will be send to WS2812B
   22:  
   23:  static unsigned char *p2rgb = NULL;      // Poiner to data to be send over DIN pin (WS2812B) 
   24:  
   25:  
   26:  // Definitions for transposed display
   27:                                               
   28:  
   29:  
   30:  //static unsigned char (*p2led)[RGB_COLS*sizeof(LEDSTR)]; 
   31:  
   32:  //static unsigned char rgb_col=0;
   33:  //static unsigned char rgb_row=0;
   34:      
   35:  
   36:  // OC6  pin 17 H3   (Din WS2812B)
   37:  // OC7  pin 18 H3   (Scope Test Point)
   38:  
   39:  // ======================================
   40:  
   41:  void WS2812B_Set_Data_Length( unsigned int length ) {
*** EVALUATION ***

Function: WS2812B_Set_Data_Length
Source  : C:\Users\R2D2\Desktop\TETRIS\Sources\WS2812B.c
Options : -CPUHCS12X -D__NO_FLOAT__ -Env"GENPATH=C:\Users\R2D2\Desktop\TETRIS;C:\Users\R2D2\Desktop\TETRIS\bin;C:\Users\R2D2\Desktop\TETRIS\prm;C:\Users\R2D2\Desktop\TETRIS\cmd;C:\Users\R2D2\Desktop\TETRIS\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Users\R2D2\Desktop\TETRIS\Sources\DP256Reg;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -EnvOBJPATH=C:\Users\R2D2\Desktop\TETRIS\bin -EnvTEXTPATH=C:\Users\R2D2\Desktop\TETRIS\bin -Lasm=%n.lst -Lasmc= -Ms -Ot -ObjN=C:\Users\R2D2\Desktop\TETRIS\TETRIS_Data\RAM\ObjectCode\WS2812B.c.o -WmsgSd1106

   42:   
   43:   
   44:          ByteCtr=length;    //
  0000 7c0000       [3]     STD   ByteCtr
   45:   
   46:    
   47:  }
  0003 3d           [5]     RTS   
   48:  
   49:  void WS2812B_Set_Data_pointer( unsigned char *data_ptr ) {
*** EVALUATION ***

Function: WS2812B_Set_Data_pointer
Source  : C:\Users\R2D2\Desktop\TETRIS\Sources\WS2812B.c
Options : -CPUHCS12X -D__NO_FLOAT__ -Env"GENPATH=C:\Users\R2D2\Desktop\TETRIS;C:\Users\R2D2\Desktop\TETRIS\bin;C:\Users\R2D2\Desktop\TETRIS\prm;C:\Users\R2D2\Desktop\TETRIS\cmd;C:\Users\R2D2\Desktop\TETRIS\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Users\R2D2\Desktop\TETRIS\Sources\DP256Reg;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -EnvOBJPATH=C:\Users\R2D2\Desktop\TETRIS\bin -EnvTEXTPATH=C:\Users\R2D2\Desktop\TETRIS\bin -Lasm=%n.lst -Lasmc= -Ms -Ot -ObjN=C:\Users\R2D2\Desktop\TETRIS\TETRIS_Data\RAM\ObjectCode\WS2812B.c.o -WmsgSd1106

   50:   
   51:    // Not transposed
   52:    p2rgb=data_ptr;    // 
  0000 7c0000       [3]     STD   p2rgb
   53:                  
   54:    // For transposed                
   55:  ///  p2led=(unsigned char (*)[RGB_COLS*sizeof(LEDSTR)])data_ptr;
   56:   
   57:    
   58:  }
  0003 3d           [5]     RTS   
   59:  
   60:  
   61:  
   62:  void WS2812B_Send_data(void)  // Important we don't use any local variables for speed reasons
   63:  
   64:  {
*** EVALUATION ***

Function: WS2812B_Send_data
Source  : C:\Users\R2D2\Desktop\TETRIS\Sources\WS2812B.c
Options : -CPUHCS12X -D__NO_FLOAT__ -Env"GENPATH=C:\Users\R2D2\Desktop\TETRIS;C:\Users\R2D2\Desktop\TETRIS\bin;C:\Users\R2D2\Desktop\TETRIS\prm;C:\Users\R2D2\Desktop\TETRIS\cmd;C:\Users\R2D2\Desktop\TETRIS\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Users\R2D2\Desktop\TETRIS\Sources\DP256Reg;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -EnvOBJPATH=C:\Users\R2D2\Desktop\TETRIS\bin -EnvTEXTPATH=C:\Users\R2D2\Desktop\TETRIS\bin -Lasm=%n.lst -Lasmc= -Ms -Ot -ObjN=C:\Users\R2D2\Desktop\TETRIS\TETRIS_Data\RAM\ObjectCode\WS2812B.c.o -WmsgSd1106

   65:    if(p2rgb == NULL)
  0000 fc0000       [3]     LDD   p2rgb
  0003 1827008f     [4/3]   LBEQ  *+147 ;abs = 0096
   66:      return;   
   67:   
   68:    
   69:     _asm sei;          // Disable Interrupts Critical timing starts here
  0007 1410         [1]     SEI   
   70:    
   71:  // ====================================================
   72:  
   73:    TC7=TCNT+1000;   // lets syncronize OC7 & OC6 with TCNT 
  0009 dc00         [3]     LDD   _TCNT
  000b c303e8       [2]     ADDD  #1000
  000e 5c00         [2]     STD   _TC7
   74:    TC6=TC7;         // and Reset WS2812B (TRES = 50000/OCTIC=1000)
  0010 dc00         [3]     LDD   _TC7
  0012 5c00         [2]     STD   _TC6
   75:        
   76:    TFLG1=0x80; //  Clr C7F
  0014 c680         [1]     LDAB  #128
  0016 5b00         [2]     STAB  _TFLG1
   77:    TFLG1=0x40; //  Clr C6F
  0018 54           [1]     LSRB  
  0019 5b00         [2]     STAB  _TFLG1
   78:     
   79:    
   80:    while (!TFLG1_C7F); // Wait for Sync 
  001b 4f0080fc     [4]     BRCLR _TFLG1,#128,*+0 ;abs = 001b
   81:    while (!TFLG1_C6F);   
  001f 4f0040fc     [4]     BRCLR _TFLG1,#64,*+0 ;abs = 001f
   82:     
   83:    // Reset flags
   84:    
   85:    TFLG1=0x80; //  Clr C7F
  0023 c680         [1]     LDAB  #128
  0025 5b00         [2]     STAB  _TFLG1
   86:    TFLG1=0x40; //  Clr C6F
  0027 54           [1]     LSRB  
  0028 5b00         [2]     STAB  _TFLG1
   87:   
   88:    
   89:    TC7=TC7+1000;  // Add some time to carry out the next tasks 
  002a dc00         [3]     LDD   _TC7
  002c c303e8       [2]     ADDD  #1000
  002f 5c00         [2]     STD   _TC7
   90:    TC6=TC6+1000;  // before next OC takes place
  0031 dc00         [3]     LDD   _TC6
  0033 c303e8       [2]     ADDD  #1000
  0036 5c00         [2]     STD   _TC6
   91:       
   92:  // **********************************************     
   93:  // DIN signal of WS2812B is generated at OC6 pin 
   94:     
   95:  // OC7 Timer generates the signal period (Tbit)
   96:  // OC6 Timer generates the signal pulse width 
   97:  // 0.4us for 0 and 0.8us for 1
   98:  
   99:  // At OC7 compare the following takes place:
  100:   
  101:  // OC7 sets OC6 at 1
  102:   
  103:                            
  104:  
  105:  // set up OC7 D and M to control OC6
  106:  
  107:  
  108:      OC7M_OC7M6=1;          // OC7 controls OC6 pin 
  0038 4c0040       [4]     BSET  _OC7M,#64
  109:      OC7D=0x40;             // When OC7 is reached OC6 pin goes HI
  003b c640         [1]     LDAB  #64
  003d 5b00         [2]     STAB  _OC7D
  110:          
  111:          
  112:      mask=0x80;             // Init walking '1'
  003f 58           [1]     LSLB  
  0040 7b0000       [3]     STAB  mask
  113:   
  114:   
  115:     // Bit value to pulse width conversion
  116:     
  117:      if((*p2rgb)&mask)      // Setup first Bit
  0043 e4fb0000     [6]     ANDB  [p2rgb,PCR]
  0047 273d         [3/1]   BEQ   *+63 ;abs = 0086
  118:            delta=T1H;
  0049 2038         [3]     BRA   *+58 ;abs = 0083
  119:      else
  120:            delta=T0H;
  121:      
  122:  
  123:  while (ByteCtr)
  124:  {
  125:  
  126:     
  127:      while (!TFLG1_C7F);  // Sync with start of period
  004b 4f0080fc     [4]     BRCLR _TFLG1,#128,*+0 ;abs = 004b
  128:    
  129:    // WARNING: Critical timing Don't put any code here
  130:  
  131:  //=========== Set bit width ================================================
  132:       TC6=TC7+delta;   // set bit width (T1H,T0H) value on OC6
  004f dc00         [3]     LDD   _TC7
  0051 f30000       [3]     ADDD  delta
  0054 5c00         [2]     STD   _TC6
  133:      
  134:  //=========== Set bit period ==========================================================   
  135:  
  136:  //   TC7=TC7+25;      // 1.25us   (nominal period) 
  137:  
  138:  // Add some extra time to the nominal period (1.25us)
  139:  // in order to have enough time set up next iteration.
  140:  // Under no circumstances the total perios should exceed 5us
  141:  // otherwise a reset condition will be detected by the WS2812B
  142:  
  143:  // 1.25us(25OC @50ns each) + 2us(40OC @50ns each) = 3.25us < 5us
  144:  
  145:  // Time in nseg
  146:  #define TNOMINAL 1250     //1.25 us 
  147:  #define TSPARE   2000     //2 us
  148:  #define TBIT  TNOMINAL/OCTIC + TSPARE/OCTIC  // must be less than 5 us
  149:   
  150:  
  151:     TC7=TC7+TBIT;     // Set bit period
  0056 dc00         [3]     LDD   _TC7
  0058 c30041       [2]     ADDD  #65
  005b 5c00         [2]     STD   _TC7
  152:  
  153:  
  154:  //=====================================================================================
  155:  
  156:  // Reset OC flags           
  157:  
  158:       TFLG1=0x80|0x40; //  Clr C7F and C6F
  005d c6c0         [1]     LDAB  #192
  005f 5b00         [2]     STAB  _TFLG1
  159:  
  160:  // Set up next bit     
  161:       
  162:       mask>>=1;        // Next bit
  0061 740000       [4]     LSR   mask
  163:  
  164:       if(mask){        // Are more bits left ?
  0064 b60000       [3]     LDAA  mask
  0067 2708         [3/1]   BEQ   *+10 ;abs = 0071
  165:       
  166:       // Bit value to pulse width conversion
  167:                
  168:            if((*p2rgb)&mask) 
  0069 a4fb0000     [6]     ANDA  [p2rgb,PCR]
  006d 2717         [3/1]   BEQ   *+25 ;abs = 0086
  169:                delta=T1H;
  006f 2012         [3]     BRA   *+20 ;abs = 0083
  170:            else
  171:                delta=T0H;
  172:       }
  173:       
  174:       else{                  // Start a new Byte     
  175:        
  176:                        
  177:            p2rgb++;          // Next byte
  0071 18720000     [5]     INCW  p2rgb
  178:            ByteCtr--;    
  0075 18730000     [5]     DECW  ByteCtr
  179:            mask=0x80;        // Reset mask
  0079 58           [1]     LSLB  
  007a 7b0000       [3]     STAB  mask
  180:            
  181:         // Setup first Bit
  182:  
  183:            if((*p2rgb)&mask)     
  007d e4fb0000     [6]     ANDB  [p2rgb,PCR]
  0081 2703         [3/1]   BEQ   *+5 ;abs = 0086
  184:                delta=T1H;
  0083 c610         [1]     LDAB  #16
  0085 8f           [2]     SKIP2 
  185:            else
  186:                delta=T0H;
  0086 c608         [1]     LDAB  #8
  0088 87           [1]     CLRA  
  0089 7c0000       [3]     STD   delta
  008c fc0000       [3]     LDD   ByteCtr
  008f 26ba         [3/1]   BNE   *-68 ;abs = 004b
  187:            
  188:         
  189:         
  190:       } // end of if
  191:  
  192:  
  193:  // ========================================================== //
  194:  
  195:          // The following code is for Debug 
  196:          // It shows how much time we have free 
  197:          // before next bit must be sent
  198:          // Free time is t2-t1
  199:          // t1: rising edge of PORTA pin0
  200:          // t2: next edge on OC7
  201:          // Actually each bit is sent every 3.25us (Tbit)
  202:          // Tbit= 1.25us (TNOMINAL) + 2us (SPARE)
  203:          // Tfree= Tbit - FreeTime(measured)
  204:  
  205:  /* 
  206:            PORTA|=0x01;
  207:            _asm nop;   
  208:            _asm nop; 
  209:            PORTA&=0xFE;
  210:    
  211:  */
  212:            
  213:  // measured values on actual code
  214:  // measured from start of period to Port A rising edge:
  215:  // 
  216:  // 1.38 us when byte is being sent  => Tfree=1.87 us
  217:  // 1.83 us when next byte is loaded => Tfree=1.42 us        
  218:  // =========================================================== //
  219:            
  220:  
  221:  
  222:         
  223:     } //End of while
  224:     
  225:       OC7D=0x00;   // When OC7 is reached OC6 pin goes LO
  0091 790000       [3]     CLR   _OC7D
  226:       _asm cli;    // Reenable Interrupts Critical section has ended     
  0094 10ef         [1]     CLI   
  227:       
  228:     
  229:     
  230:  }  // End of WS2812B_Send_data
  0096 3d           [5]     RTS   
  231:  
  232:  
  233:  
  234:  
  235:  
  236:  
  237:  //***************************************************************
  238:  //                            WS2812B_Init
  239:  //===============================================================
  240:  // WS2812B_Init initializes OC Hardware for WS2812B Led Controller 
  241:  // OC6 drives the DIN pin on WS2812B. Init_display sets DIN to 0
  242:  // and OC7 to toggle mode after the call   
  243:  // How it works :
  244:  // OC7 controls OC6 setting it HI at the start of each period
  245:  // OC6 returns to LO after TH1/TH0. At the end of the period OC7 
  246:  // returns OC6 to HI.
  247:  //
  248:  // |--------|                        |------
  249:  // |  TH1/0 |                        |
  250:  // |        |------------------------|
  251:  // OC6 --> TH1/0
  252:  // OC7 --> Period
  253:  //
  254:  // 
  255:  //===============================================================
  256:  
  257:  
  258:  void WS2812B_Init(void)
  259:  
  260:  {
*** EVALUATION ***

Function: WS2812B_Init
Source  : C:\Users\R2D2\Desktop\TETRIS\Sources\WS2812B.c
Options : -CPUHCS12X -D__NO_FLOAT__ -Env"GENPATH=C:\Users\R2D2\Desktop\TETRIS;C:\Users\R2D2\Desktop\TETRIS\bin;C:\Users\R2D2\Desktop\TETRIS\prm;C:\Users\R2D2\Desktop\TETRIS\cmd;C:\Users\R2D2\Desktop\TETRIS\Sources;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\lib;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\src;C:\Users\R2D2\Desktop\TETRIS\Sources\DP256Reg;C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -Env"LIBPATH=C:\Program Files (x86)\Freescale\CWS12v5.1\lib\HC12c\include" -EnvOBJPATH=C:\Users\R2D2\Desktop\TETRIS\bin -EnvTEXTPATH=C:\Users\R2D2\Desktop\TETRIS\bin -Lasm=%n.lst -Lasmc= -Ms -Ot -ObjN=C:\Users\R2D2\Desktop\TETRIS\TETRIS_Data\RAM\ObjectCode\WS2812B.c.o -WmsgSd1106

  261:  
  262:    // Set TCNT prescaler     
  263:   
  264:    TSCR2 = (TSCR2 & 0xF8) | 0x01;    // Prescaler en 2, cuenta cada 2/40MHz = 50ns
  0000 d600         [3]     LDAB  _TSCR2
  0002 c4f8         [1]     ANDB  #248
  0004 ca01         [1]     ORAB  #1
  0006 5b00         [2]     STAB  _TSCR2
  265:    TSCR1 |= TSCR1_TEN_MASK;          // Habilita el timer para el IOC
  0008 4c0080       [4]     BSET  _TSCR1,#128
  266:  
  267:    // Set Timer 6 and 7 in OC mode
  268:    TIOS_IOS7=1;    
  000b 4c0080       [4]     BSET  _TIOS,#128
  269:    TIOS_IOS6=1;
  000e 4c0040       [4]     BSET  _TIOS,#64
  270:   
  271:    // Toggle on OC7 (For debug)
  272:    TCTL1_OL7 = 1;   
  0011 4c0040       [4]     BSET  _TCTL1,#64
  273:    TCTL1_OM7 = 0;
  0014 4d0080       [4]     BCLR  _TCTL1,#128
  274:  
  275:    // Set OC6 for Low on succesfull OC
  276:    
  277:    TCTL1_OL6 =0;    // When OC6 is reached OC6 pin (DIN) goes LO 
  0017 4d0010       [4]     BCLR  _TCTL1,#16
  278:    TCTL1_OM6 =1;
  001a 4c0020       [4]     BSET  _TCTL1,#32
  279:  
  280:    // Force OC to set previous settings
  281:    
  282:    CFORC_FOC6=1;    
  001d 4c0040       [4]     BSET  _CFORC,#64
  283:    CFORC_FOC7=1; 
  0020 4c0080       [4]     BSET  _CFORC,#128
  284:    
  285:  }
  0023 3d           [5]     RTS   
